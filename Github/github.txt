
                       
                                          ------------------>git + github<------------------
                                      
⭐️ What is Git?

Git is a version control system which lets you track changes you make to your files over time. With Git, you can revert to various states of your files (like a time traveling machine). You can also make a copy of your file, make changes to that copy, and then merge these changes to the original copy.                                   


⭐️ How to install Git==>

syntax:-    sudo apt install git

⭐️ How to configure Git====>

 git --version. This shows you the current version installed on you PC.

The next thing you'll need to do is to set your username and email address. Git will use this information to identify who made specific changes to files.

To set your username, type and execute these commands: git config --global user.name "YOUR_USERNAME" and git config --global user.email "YOUR_EMAIL". Just make sure to replace "YOUR_USERNAME" and "YOUR_EMAIL" with the values you choose.


⭐️ HOW TO CREATE AND INITIALIZE A PROJECT IN GIT

I have created a folder on my desktop called Git and GitHub.txt file inside it. Using the command line, navigate to your new project's location. For me, I would run the following commands:

cd desktop

cd Git 

⭐️ Now to initialize your project, simply run git init. This will tell Git to get ready to start watching your files for every change that occurs. It looks like this:

beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git init
Reinitialized existing Git repository in /home/beryl/Desktop/git/.git/
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ 

⭐️What is GitHub?

GitHub is an online hosting service for Git repositories.
GitHub lets you store your repo on their platform. Another awesome feature that comes with GitHub is the ability to collaborate with other developers from any location.

⭐️⭐️How to push a repository to GitHub

I will divide this section into steps to help you understand the process more clearly.
Step 1 – Create a GitHub account

Step 2 – Create a repository

Step 3 – Add and commit file(s)

Before we "add" and "commit" our files, you need to understand the stages of a file being tracked by Git.

⭐️Committed state

A file is in the committed state when all the changes made to the file have been saved in the local repo. Files in the committed stage are files ready to be pushed to the remote repo (on GitHub).

⭐️Modified state

A file in the modified state has some changes made to it but it's not yet saved. This means that the state of the file has been altered from its previous state in the committed state.

⭐️Staged state

A file in the staged state means it is ready to be committed. In this state, all necessary changes have been made so the next step is to move the file to the commit state.


⭐️⭐️How to add files in Git

When we first initialized our project, the file was not being tracked by Git. To do that, we use this command git add . The period or dot that comes after add means all the files that exist in the repository. If you want to add a specific file, maybe one named about.txt, you use git add about.txt.

Now our file is in the staged state. You will not get a response after this command, but to know what state your file is in, you can run the git status command.

⭐️⭐️How to commit files in Git

The next state for a file after the staged state is the committed state. To commit our file, we use the git commit -m "first commit" command.

The first part of the command git commit tells Git that all the files staged are ready to be committed so it is time to take a snapshot. The second part -m "first commit" is the commit message. -m is shorthand for message while the text inside the parenthesis is the commit message.


⭐️Step 4 – Push the repository to GitHub

git remote add origin https://github.com/ihechikara/git-and-github-tutorial.git
git branch -M main
git push -u origin main




⭐️⭐️ How to Use Branches in Git
With branches, you can create a copy of a file you would like to work on without messing up the original copy. You can either merge these changes to the original copy or just let the branch remain independent. 


⭐️⭐️ To create a new branch, run this command: git checkout -b test

beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git checkout -b test
Switched to a new branch 'test'
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ 

⭐️⭐️ To rename a Git branch, run the following command: git branch -m <old> <new>. This will change the name of the branch you are viewing to the new name you specify. You do not need to specify the old branch name if you want to rename the branch you are viewing.

⭐️After committing your test branch, switch back to the main branch by running this command: git checkout main.

⭐️⭐️Now we can merge the changes we made in the test branch into the main branch by running ===> git merge test. At this point, you will see all the changes made in the test branch reflected on the main branch. You should also receive a response similar to this:

⭐️after git merge krishan
⭐️git push -u origin main

beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git checkout -b krishan
Switched to a new branch 'krishan'
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git add .
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git commit -m "first "
[krishan 230d5c0] first
 1 file changed, 3 insertions(+), 3 deletions(-)
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git push -u origin krishan
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 464 bytes | 464.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote: 
remote: Create a pull request for 'krishan' on GitHub by visiting:
remote:      https://github.com/krishansorout131/Training/pull/new/krishan
remote: 
To github.com:krishansorout131/Training.git
 * [new branch]      krishan -> krishan
Branch 'krishan' set up to track remote branch 'krishan' from 'origin'.
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git branch
* krishan
  main
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git merge krishan
Updating 77070f2..230d5c0
Fast-forward
 github.txt | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git push -u origin main
Total 0 (delta 0), reused 0 (delta 0)
To github.com:krishansorout131/Training.git
   77070f2..230d5c0  main -> main
Branch 'main' set up to track remote branch 'main' from 'origin'.
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ 

⭐️⭐️delete a branch locally and remotely/ongithub
delete branch from remote repo..

beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git push origin --delete krishan
To github.com:krishansorout131/Training.git
 - [deleted]         krishan
 delete branch from local 
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git branch -d krishan
Deleted branch krishan (was 77070f2).
beryl@beryl-HP-ProBook-6460b:~/Desktop/git$ git branch
* main


⭐️⭐️ How to Pull a Repository in Git

To pull in Git means to clone a remote repository's current state into your computer/repository. This comes in handy when you want to work on your repo from a different computer or when you are contributing to an open source project online. 



beryl@beryl-HP-ProBook-6460b:~/Desktop$ mkdir pull
beryl@beryl-HP-ProBook-6460b:~/Desktop$ cd pull
beryl@beryl-HP-ProBook-6460b:~/Desktop/pull$ git init
Initialized empty Git repository in /home/beryl/Desktop/pull/.git/
beryl@beryl-HP-ProBook-6460b:~/Desktop/pull$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)
beryl@beryl-HP-ProBook-6460b:~/Desktop/pull$ git commit -m "yf"
On branch master

Initial commit

nothing to commit (create/copy files and use "git add" to track)
beryl@beryl-HP-ProBook-6460b:~/Desktop/pull$ git remote add origin git@github.com:krishansorout131/Training.git
beryl@beryl-HP-ProBook-6460b:~/Desktop/pull$ git pull origin main
remote: Enumerating objects: 9, done.
remote: Counting objects: 100% (9/9), done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 9 (delta 2), reused 9 (delta 2), pack-reused 0
Unpacking objects: 100% (9/9), 2.67 KiB | 455.00 KiB/s, done.
From github.com:krishansorout131/Training
 * branch            main       -> FETCH_HEAD
 * [new branch]      main       -> origin/main


⭐️⭐️clone
git clone https://github.com/krishansorout131/Training.git

⭐️⭐️delete a file from repo

git rm Linux.txt
git commit -m "delete file"
git push

Remove files from the Git But keep the files in your local repository:
$ git rm --cached







⭐️⭐️Generating a new SSH key

    Open Terminal.

    Paste the text below, substituting in your GitHub email address.

    $ ssh-keygen -t ed25519 -C "your_email@example.com"	
    
    
    Adding your SSH key to the ssh-agent

Before adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key.

    Start the ssh-agent in the background.

    $ eval "$(ssh-agent -s)"
    > Agent pid 59566

    Depending on your environment, you may need to use a different command. For example, you may need to use root access by running sudo -s -H before starting the ssh-agent, or you may need to use exec ssh-agent bash or exec ssh-agent zsh to run the ssh-agent.

    Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file.

    $ ssh-add ~/.ssh/id_ed25519


