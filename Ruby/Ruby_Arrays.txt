                                        ----------------------> Array <--------------------------

An Array is an ordered, integer-indexed collection of objects, called elements. Any object may be an Array element.

Array Indexes:--

Array indexing starts at 0, as in C or Java.

A positive index is an offset from the first element:

    Index 0 indicates the first element.

    Index 1 indicates the second element.

Creating Arrays:--

You can create an Array object explicitly with:

 * An array literal.

You can convert certain objects to Arrays with:

 * Method Array.

An Array can contain different types of objects. For example, the array below contains an Integer, a String and a Float:

3.0.0 :149 > arr=[1,"two",3.0]
 => [1, "two", 3.0] 
3.0.0 :150 > arr
 => [1, "two", 3.0] 
3.0.0 :151 > 


* aray using method:--

3.0.0 :153 > a=Array.new()
 => [] 
3.0.0 :154 > a
 => [] 

3.0.0 :155 > a=Array.new(3)
 => [nil, nil, nil] 

3.0.0 :156 > a=Array.new(3,true)
 => [true, true, true] 

3.0.0 :157 > a=Array.new(3) {|i| i.to_s}
 => ["0", "1", "2"] 


This is also a quick way to build up multi-dimensional arrays:

3.0.0 :158 > a=Array.new(3) {Array.new(3)}
 => [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]] 

** Accessing Elements:--

Elements in an array can be retrieved using the Array#[] method. It can take a single integer argument (a numeric index), a pair of arguments (start and length) or a range. Negative indices start counting from the end, with -1 being the last element.

3.0.0 :162 > arr[1]
 => 2 
3.0.0 :163 > arr[5]
 => 6 
3.0.0 :164 > arr[1,4]
 => [2, 3, 4, 5] 
3.0.0 :165 > arr[1..4]
 => [2, 3, 4, 5] 


******** Array Methods :---

1.  at(index) → object 

Returns the element at Integer offset index; does not modify self.
examples:-

3.0.0 :168 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :169 > arr.at(3)
 => 4 

2.  fetch(index) → element click to toggle source
fetch(index, default_value) → element
fetch(index) {|index| ... } → element 

examples:-
3.0.0 :181 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :182 > arr.fetch(2)
 => 3 
3.0.0 :183 > arr.fetch(3)
 => 4 
 
 3.0.0 :184 > arr.fetch(1) {|i| raise 'cannot happen'}
 => 2 
3.0.0 :185 > arr.fetch(50) {|i| "value for #{i}"}
 => "value for 50" 
3.0.0 :186 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.  first → object or nil
first(n) → new_array

Returns elements from self; does not modify self.

When no argument is given, returns the first element:
examples:--

3.0.0 :186 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :187 > arr.first
 => 1 

3.0.0 :188 > arr.first(3)
 => [1, 2, 3] 

4.  last → object or nil
last(n) → new_array

Returns elements from self; self is not modified.

When no argument is given, returns the last element:
examples:--
3.0.0 :189 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :190 > arr.last
 => 7 
3.0.0 :191 > arr.last(3)
 => [5, 6, 7] 

5. take(n) → new_array

Returns a new Array containing the first n element of self, where n is a non-negative Integer; does not modify self.

Examples:
3.0.0 :192 > arr.take(1)
 => [1] 
3.0.0 :193 > arr.take(2)
 => [1, 2] 
3.0.0 :194 > arr.take(3)
 => [1, 2, 3] 
3.0.0 :195 > arr.take(100)
 => [1, 2, 3, 4, 5, 6, 7] 


6.  drop(n) → new_array

Returns a new Array containing all but the first n element of self, where n is a non-negative Integer; does not modify self.

Examples:

3.0.0 :203 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.0 :204 > a.drop(7)
 => [8, 9] 
3.0.0 :205 > a.drop(6)
 => [7, 8, 9] 
3.0.0 :206 > a.drop(8)
 => [9] 


****** Obtaining Information about an Array

7.  length → an_integer 

Returns the count of elements in self
examples:--
3.0.0 :208 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :209 > arr.length
 => 7 

8. count → an_integer 
count(obj) → an_integer
count {|element| ... } → an_integer

Returns a count of specified elements.

With no argument and no block, returns the count of all elements:-

examples:--
3.0.0 :226 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :227 > arr.count
 => 7 

3.0.0 :218 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :219 > arr.count {|i| i>3}
 => 4 


9.  empty? → true or false

Returns true if the count of elements in self is zero, false otherwise.
example:-

3.0.0 :226 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :228 > arr.empty?
 => false 

3.0.0 :229 > arr=[]
 => [] 

3.0.0 :230 > arr.empty?
 => true 

10.  include?(obj) → true or false 

Returns true if for some index i in self, obj == self[i]; otherwise false:
examples:--

3.0.0 :229 > arr=[]
 => [] 

3.0.0 :231 > arr.include?(4)
 => false 

3.0.0 :232 > arr
 => [] 

3.0.0 :233 > arr=[12,435,2,767,455]
 => [12, 435, 2, 767, 455] 

3.0.0 :234 > arr.include?(435)
 => true 

****** Adding Items to Arrays:--

11.  push(*objects) → self

Appends trailing elements.

Appends each argument in objects to self; returns self:
examples:--

3.0.0 :235 > arr
 => [12, 435, 2, 767, 455] 

3.0.0 :236 > arr.push(1)
 => [12, 435, 2, 767, 455, 1] 

3.0.0 :237 > arr
 => [12, 435, 2, 767, 455, 1] 

3.0.0 :238 > arr.push(3,4,5)
 => [12, 435, 2, 767, 455, 1, 3, 4, 5] 

12.  unshift(*objects) → self
unshift will add a new item to the beginning of an array.
Prepends the given objects to self:
examples:-
3.0.0 :239 > arr.unshift("arr")
 => ["arr", 12, 435, 2, 767, 455, 1, 3, 4, 5]
 
 13.  insert(index, *objects) → self 
Using the insert method, you can also insert multiple values at once:
Inserts given objects before or after the element at Integer index offset; returns self.

When index is non-negative, inserts all given objects before the element at offset index
examples:-
3.0.0 :240 > arr.insert(1,"hello","world")
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1, 3, 4, 5] 


******* Removing Items from an Array:--


14.  pop → object or nil
pop(n) → new_array

Removes and returns trailing elements.

When no argument is given and self is not empty, removes and returns the last element:
examples:--
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1, 3, 4, 5] 

3.0.0 :247 > arr.pop
 => 5 

3.0.0 :248 > arr
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1, 3, 4] 

3.0.0 :249 > arr.pop(2)
 => [3, 4] 

3.0.0 :250 > arr
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1] 


15.  shift → object or nil
shift(n) → new_array

Removes and returns leading elements.

When no argument is given, removes and returns the first element: 
example:-
3.0.0 :252 > arr
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1] 
3.0.0 :253 > arr.shift
 => "arr" 
3.0.0 :254 > arr
 => ["hello", "world", 12, 435, 2, 767, 455, 1] 

3.0.0 :255 > arr.shift(2)
 => ["hello", "world"] 
3.0.0 :256 > arr
 => [12, 435, 2, 767, 455, 1] 

16. delete(obj) → deleted_object 
delete(obj) {|nosuch| ... } → deleted_object or block_return

Removes zero or more elements from self; returns self.

When no block is given, removes from self each element ele such that ele == obj; returns the last deleted element:

examples:--

3.0.0 :262 > arr.delete("world")
 => "world"
  
3.0.0 :263 > arr
 => [1, "hello", 12, 435, 2, 767, 455, 1] 
 
 17.  delete_at(index) → deleted_object or nil 

Deletes an element from self, per the given Integer index.

When index is non-negative, deletes the element at offset index:

examples:--
3.0.0 :270 > arr
 => ["hello", 12, 435, 2, 767, 455] 
3.0.0 :271 > arr.delete_at(0)
 => "hello" 
3.0.0 :272 > arr
 => [12, 435, 2, 767, 455] 

18. compact → new_array

Returns a new Array containing all non-nil elements from self:
example:-
3.0.0 :276 > ab=[nil,1,2,3,nil]
 => [nil, 1, 2, 3, nil] 
3.0.0 :277 > ab.compact      it makes changes in a copy array not in original array.
 => [1, 2, 3] 

19. compact! → self or nil 

Removes all nil elements from self.

Returns self if any elements removed, otherwise nil.
example:-- it makes changes in original array. and permanentely remove nil values from array.

3.0.0 :287 > ab
 => [3, nil, nil, 1, 2, 3] 
3.0.0 :288 > ab.compact!
 => [3, 1, 2, 3] 
3.0.0 :289 > ab
 => [3, 1, 2, 3] 

20. uniq → new_array
uniq {|element| ... } → new_array

Returns a new Array containing those elements from self that are not duplicates, the first occurrence always being retained.

With no block given, identifies and omits duplicates using method eql? to compare.

examples:--
3.0.0 :290 > ab
 => [3, 1, 2, 3] 
3.0.0 :291 > ab.uniq      only makes changes in a copy array .
 => [3, 1, 2] 
3.0.0 :292 > ab
 => [3, 1, 2, 3] 


21. uniq! → self or nil click to toggle source
uniq! {|element| ... } → self or nil

Removes duplicate elements from self, the first occurrence always being retained; returns self if any elements removed, nil otherwise.

With no block given, identifies and removes elements using method eql? to compare.

Returns self if any elements removed:
examples:--

3.0.0 :299 > arr
 => [12, 435, 2, 767, 455, 455, 455, 455] 
3.0.0 :300 > arr.uniq!
 => [12, 435, 2, 767, 455]      permanentely remove all duplicate values from array. 
3.0.0 :301 > arr
 => [12, 435, 2, 767, 455] 


*********** Iterating over Arrays:--

22.  each {|element| ... } → self
each → Enumerator

Iterates over array elements.

When a block given, passes each successive array element to the block; returns self:
examples:--
3.0.0 :303 > arr.each {|i| print i,' '}
12 435 2 767 455  => [12, 435, 2, 767, 455] 


3.0.0 :002 > a=["hello",123,456.2]
 => ["hello", 123, 456.2] 
3.0.0 :003 > a.each {|i| puts "#{i.class} #{i}"}
String hello
Integer 123
Float 456.2
 => ["hello", 123, 456.2] 

23.  reverse_each {|element| ... } → self 
reverse_each → Enumerator

Iterates backwards over array elements.

When a block given, passes, in reverse order, each element to the block; returns self:
examples:-
3.0.0 :007 > a.reverse_each
 => #<Enumerator: ["hello", 123, 456.2]:reverse_each> 

3.0.0 :008 > a.reverse_each {|i| print i ,' '}

456.2 123 hello  => ["hello", 123, 456.2] 

24. The map method can be used to create a new array based on the original array, but with the values modified by the supplied block:

 map {|element| ... } → new_array 
map → new_enumerator

Calls the block, if given, with each element of self; returns a new Array whose elements are the return values from the block:

examples:-- 
3.0.0 :012 > a.map
 => #<Enumerator: ["hello", 123, 456.2]:map> 

3.0.0 :014 > a.map {|a| print a, ' '}
hello 123 456.2  => [nil, nil, nil] 


25. map! {|element| ... } → self
map! → new_enumerator

Calls the block, if given, with each element; replaces the element with the block's return value:
examples:--
3.0.0 :023 > a
 => [1, 3, 5, 7, 9, 2, 4] 

3.0.0 :024 > a.map! {|a| print a, ' '}
1 3 5 7 9 2 4  => [nil, nil, nil, nil, nil, nil, nil] 

3.0.0 :025 > a
 => [nil, nil, nil, nil, nil, nil, nil] 


****** Methods for creating new array:--

26.[] (*args) 

Returns a new array populated with the given objects.
examples:--
3.0.0 :028 > b=Array.[](1,2,3,4,5)
 => [1, 2, 3, 4, 5] 
3.0.0 :029 > b
 => [1, 2, 3, 4, 5] 

27.  new → new_empty_array
new(array) → new_array
new(size) → new_array
new(size, default_value) → new_array
new(size) {|index| ... } → new_array 
examples:--

3.0.0 :030 > a=Array.new(["hello","i","am","krishan"])
 => ["hello", "i", "am", "krishan"] 
3.0.0 :031 > a
 => ["hello", "i", "am", "krishan"] 

3.0.0 :032 > b=Array.new()
 => [] 
3.0.0 :033 > b=Array.new(3)
 => [nil, nil, nil] 

28.  try_convert(object) → object, new_array, or nil 

If object is an Array object, returns object.

Otherwise if object responds to :to_ary, calls object.to_ary and returns the result.

Returns nil if object does not respond to :to_ary

Raises an exception unless object.to_ary returns an Array object.
examples:--



*****Methods for Querying:--

29. all? → true or false
all? {|element| ... } → true or false
all?(obj) → true or false 
examples:--
3.0.0 :038 > a
 => ["hello", "i", "am", "krishan"] 
3.0.0 :039 > a.all?
 => true 
3.0.0 :040 > b
 => [nil, nil, nil] 
3.0.0 :041 > b.all?
 => false 

30.  any? → true or false 
any? {|element| ... } → true or false
any?(obj) → true or false 

examples:--
3.0.0 :042 > a
 => ["hello", "i", "am", "krishan"] 
3.0.0 :043 > a.any?
 => true 
3.0.0 :044 > b.any?
 => false 
3.0.0 :045 > b.push(1,2,3)
 => [nil, nil, nil, 1, 2, 3] 
3.0.0 :046 > b.any?
 => true 

3.0.0 :047 > [0,1,2].any? {|i| i>1}
 => true 
3.0.0 :048 > [0,1,2].any? {|i| i>2}
 => false 

31. none? → true or false
none? {|element| ... } → true or false
none?(obj) → true or false

Returns true if no element of self meet a given criterion.

With no block given and no argument, returns true if self has no truthy elements, false otherwise:
examples:--
3.0.0 :003 > b=[]
 => []                     none is true when every element of array is not meet given critertion.
3.0.0 :004 > b.none?
 => true 
3.0.0 :005 > b=[nil,nil]
 => [nil, nil] 
3.0.0 :006 > b.none?
 => true 
3.0.0 :007 > b=[1,nil]
 => [1, nil] 
3.0.0 :008 > b.none?
 => false 

3.0.0 :009 > a=[1,2,3]
 => [1, 2, 3] 
3.0.0 :010 > a.none? {|i| i>3}
 => true 
3.0.0 :011 > a.none? {|i| i>4}
 => true 
3.0.0 :012 > a.none? {|i| i>2}
 => false 

32.  one? → true or false 
one? {|element| ... } → true or false
one?(obj) → true or false

Returns true if exactly one element of self meets a given criterion.

With no block given and no argument, returns true if self has exactly one truthy element, false otherwise:

examples:- only on one element meet critertion then it is true otherwise false;

3.0.0 :013 > a
 => [1, 2, 3] 
3.0.0 :014 > b
 => [1, nil] 
3.0.0 :015 > a.one?
 => false 
3.0.0 :016 > b.one?
 => true 
3.0.0 :017 > b=[nil,1,3]
 => [nil, 1, 3] 
3.0.0 :018 > b.one?
 => false 

3.0.0 :023 > a.one? {|i| i<3}
 => false 
3.0.0 :024 > a.one? {|i| i<2}
 => true 
3.0.0 :025 > a
 => [1, 2, 3] 

33.  count → an_integer 
count(obj) → an_integer
count {|element| ... } → an_integer

Returns a count of specified elements.

With no argument and no block, returns the count of all elements:

examples:-

3.0.0 :026 > a
 => [1, 2, 3] 
3.0.0 :027 > a.count
 => 3 
3.0.0 :028 > b
 => [nil, 1, 3] 
3.0.0 :029 > b.count
 => 3 

3.0.0 :033 > a.count {|i| i < 3}
 => 2 
3.0.0 :034 > a
 => [1, 2, 3] 

34.  index(object) → integer or nil 
index {|element| ... } → integer or nil
index → new_enumerator

Returns the index of a specified element.

When argument object is given but no block, returns the index of the first element element for which object == element:

eaxmples:--

3.0.0 :035 > a
 => [1, 2, 3] 
3.0.0 :036 > a.index(2)
 => 1 
3.0.0 :037 > a.index(3)
 => 2 
3.0.0 :038 > a.push("hello","world")
 => [1, 2, 3, "hello", "world"] 
3.0.0 :039 > a.index("world")
 => 4 

3.0.0 :040 > a.index {|i| i == "world"}
 => 4 


35.  rindex(object) → integer or nil c
rindex {|element| ... } → integer or nil
rindex → new_enumerator

Returns the index of the last element for which object == element.

When argument object is given but no block, returns the index of the last such element found:

example:-

3.0.0 :042 > a
 => [1, 2, 3, "hello", "world", 1] 
3.0.0 :043 > a.rindex(1)                 it checks elements from right side and return first match only.
 => 5 


36.  hash → integer

Returns the integer hash value for self.

Two arrays with the same content will have the same hash code (and will compare using eql?):
examples:--

3.0.0 :044 > a
 => [1, 2, 3, "hello", "world", 1] 

3.0.0 :045 > a.hash
 => 4498992473896220533 

3.0.0 :046 > b=a
 => [1, 2, 3, "hello", "world", 1] 

3.0.0 :047 > b
 => [1, 2, 3, "hello", "world", 1] 

3.0.0 :048 > b.hash
 => 4498992473896220533 
 
 
