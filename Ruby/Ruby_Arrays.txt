                                        ----------------------> Array <--------------------------

An Array is an ordered, integer-indexed collection of objects, called elements. Any object may be an Array element.

Array Indexes:--

Array indexing starts at 0, as in C or Java.

A positive index is an offset from the first element:

    Index 0 indicates the first element.

    Index 1 indicates the second element.

Creating Arrays:--

You can create an Array object explicitly with:

 * An array literal.

You can convert certain objects to Arrays with:

 * Method Array.

An Array can contain different types of objects. For example, the array below contains an Integer, a String and a Float:

3.0.0 :149 > arr=[1,"two",3.0]
 => [1, "two", 3.0] 
3.0.0 :150 > arr
 => [1, "two", 3.0] 
3.0.0 :151 > 


* aray using method:--

3.0.0 :153 > a=Array.new()
 => [] 
3.0.0 :154 > a
 => [] 

3.0.0 :155 > a=Array.new(3)
 => [nil, nil, nil] 

3.0.0 :156 > a=Array.new(3,true)
 => [true, true, true] 

3.0.0 :157 > a=Array.new(3) {|i| i.to_s}
 => ["0", "1", "2"] 


This is also a quick way to build up multi-dimensional arrays:

3.0.0 :158 > a=Array.new(3) {Array.new(3)}
 => [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]] 

** Accessing Elements:--

Elements in an array can be retrieved using the Array#[] method. It can take a single integer argument (a numeric index), a pair of arguments (start and length) or a range. Negative indices start counting from the end, with -1 being the last element.

3.0.0 :162 > arr[1]
 => 2 
3.0.0 :163 > arr[5]
 => 6 
3.0.0 :164 > arr[1,4]
 => [2, 3, 4, 5] 
3.0.0 :165 > arr[1..4]
 => [2, 3, 4, 5] 


******** Array Methods :---

1.  at(index) → object 

Returns the element at Integer offset index; does not modify self.
examples:-

3.0.0 :168 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :169 > arr.at(3)
 => 4 

2.  fetch(index) → element click to toggle source
fetch(index, default_value) → element
fetch(index) {|index| ... } → element 

examples:-
3.0.0 :181 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :182 > arr.fetch(2)
 => 3 
3.0.0 :183 > arr.fetch(3)
 => 4 
 
 3.0.0 :184 > arr.fetch(1) {|i| raise 'cannot happen'}
 => 2 
3.0.0 :185 > arr.fetch(50) {|i| "value for #{i}"}
 => "value for 50" 
3.0.0 :186 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.  first → object or nil
first(n) → new_array

Returns elements from self; does not modify self.

When no argument is given, returns the first element:
examples:--

3.0.0 :186 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :187 > arr.first
 => 1 

3.0.0 :188 > arr.first(3)
 => [1, 2, 3] 

4.  last → object or nil
last(n) → new_array

Returns elements from self; self is not modified.

When no argument is given, returns the last element:
examples:--
3.0.0 :189 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :190 > arr.last
 => 7 
3.0.0 :191 > arr.last(3)
 => [5, 6, 7] 

5. take(n) → new_array

Returns a new Array containing the first n element of self, where n is a non-negative Integer; does not modify self.

Examples:
3.0.0 :192 > arr.take(1)
 => [1] 
3.0.0 :193 > arr.take(2)
 => [1, 2] 
3.0.0 :194 > arr.take(3)
 => [1, 2, 3] 
3.0.0 :195 > arr.take(100)
 => [1, 2, 3, 4, 5, 6, 7] 


6.  drop(n) → new_array

Returns a new Array containing all but the first n element of self, where n is a non-negative Integer; does not modify self.

Examples:

3.0.0 :203 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.0 :204 > a.drop(7)
 => [8, 9] 
3.0.0 :205 > a.drop(6)
 => [7, 8, 9] 
3.0.0 :206 > a.drop(8)
 => [9] 


****** Obtaining Information about an Array

7.  length → an_integer 

Returns the count of elements in self
examples:--
3.0.0 :208 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :209 > arr.length
 => 7 

8. count → an_integer 
count(obj) → an_integer
count {|element| ... } → an_integer

Returns a count of specified elements.

With no argument and no block, returns the count of all elements:-

examples:--
3.0.0 :226 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :227 > arr.count
 => 7 

3.0.0 :218 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :219 > arr.count {|i| i>3}
 => 4 


9.  empty? → true or false

Returns true if the count of elements in self is zero, false otherwise.
example:-

3.0.0 :226 > arr
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :228 > arr.empty?
 => false 

3.0.0 :229 > arr=[]
 => [] 

3.0.0 :230 > arr.empty?
 => true 

10.  include?(obj) → true or false 

Returns true if for some index i in self, obj == self[i]; otherwise false:
examples:--

3.0.0 :229 > arr=[]
 => [] 

3.0.0 :231 > arr.include?(4)
 => false 

3.0.0 :232 > arr
 => [] 

3.0.0 :233 > arr=[12,435,2,767,455]
 => [12, 435, 2, 767, 455] 

3.0.0 :234 > arr.include?(435)
 => true 

****** Adding Items to Arrays:--

11.  push(*objects) → self

Appends trailing elements.

Appends each argument in objects to self; returns self:
examples:--

3.0.0 :235 > arr
 => [12, 435, 2, 767, 455] 

3.0.0 :236 > arr.push(1)
 => [12, 435, 2, 767, 455, 1] 

3.0.0 :237 > arr
 => [12, 435, 2, 767, 455, 1] 

3.0.0 :238 > arr.push(3,4,5)
 => [12, 435, 2, 767, 455, 1, 3, 4, 5] 

12.  unshift(*objects) → self
unshift will add a new item to the beginning of an array.
Prepends the given objects to self:
examples:-
3.0.0 :239 > arr.unshift("arr")
 => ["arr", 12, 435, 2, 767, 455, 1, 3, 4, 5]
 
 13.  insert(index, *objects) → self 
Using the insert method, you can also insert multiple values at once:
Inserts given objects before or after the element at Integer index offset; returns self.

When index is non-negative, inserts all given objects before the element at offset index
examples:-
3.0.0 :240 > arr.insert(1,"hello","world")
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1, 3, 4, 5] 


******* Removing Items from an Array:--


14.  pop → object or nil
pop(n) → new_array

Removes and returns trailing elements.

When no argument is given and self is not empty, removes and returns the last element:
examples:--
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1, 3, 4, 5] 

3.0.0 :247 > arr.pop
 => 5 

3.0.0 :248 > arr
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1, 3, 4] 

3.0.0 :249 > arr.pop(2)
 => [3, 4] 

3.0.0 :250 > arr
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1] 


15.  shift → object or nil
shift(n) → new_array

Removes and returns leading elements.

When no argument is given, removes and returns the first element: 
example:-
3.0.0 :252 > arr
 => ["arr", "hello", "world", 12, 435, 2, 767, 455, 1] 
3.0.0 :253 > arr.shift
 => "arr" 
3.0.0 :254 > arr
 => ["hello", "world", 12, 435, 2, 767, 455, 1] 

3.0.0 :255 > arr.shift(2)
 => ["hello", "world"] 
3.0.0 :256 > arr
 => [12, 435, 2, 767, 455, 1] 

16. delete(obj) → deleted_object 
delete(obj) {|nosuch| ... } → deleted_object or block_return

Removes zero or more elements from self; returns self.

When no block is given, removes from self each element ele such that ele == obj; returns the last deleted element:

examples:--

3.0.0 :262 > arr.delete("world")
 => "world"
  
3.0.0 :263 > arr
 => [1, "hello", 12, 435, 2, 767, 455, 1] 
 
 17.  delete_at(index) → deleted_object or nil 

Deletes an element from self, per the given Integer index.

When index is non-negative, deletes the element at offset index:

examples:--
3.0.0 :270 > arr
 => ["hello", 12, 435, 2, 767, 455] 
3.0.0 :271 > arr.delete_at(0)
 => "hello" 
3.0.0 :272 > arr
 => [12, 435, 2, 767, 455] 

18. compact → new_array

Returns a new Array containing all non-nil elements from self:
example:-
3.0.0 :276 > ab=[nil,1,2,3,nil]
 => [nil, 1, 2, 3, nil] 
3.0.0 :277 > ab.compact      it makes changes in a copy array not in original array.
 => [1, 2, 3] 

19. compact! → self or nil 

Removes all nil elements from self.

Returns self if any elements removed, otherwise nil.
example:-- it makes changes in original array. and permanentely remove nil values from array.

3.0.0 :287 > ab
 => [3, nil, nil, 1, 2, 3] 
3.0.0 :288 > ab.compact!
 => [3, 1, 2, 3] 
3.0.0 :289 > ab
 => [3, 1, 2, 3] 

20. uniq → new_array
uniq {|element| ... } → new_array

Returns a new Array containing those elements from self that are not duplicates, the first occurrence always being retained.

With no block given, identifies and omits duplicates using method eql? to compare.

examples:--
3.0.0 :290 > ab
 => [3, 1, 2, 3] 
3.0.0 :291 > ab.uniq      only makes changes in a copy array .
 => [3, 1, 2] 
3.0.0 :292 > ab
 => [3, 1, 2, 3] 


21. uniq! → self or nil click to toggle source
uniq! {|element| ... } → self or nil

Removes duplicate elements from self, the first occurrence always being retained; returns self if any elements removed, nil otherwise.

With no block given, identifies and removes elements using method eql? to compare.

Returns self if any elements removed:
examples:--

3.0.0 :299 > arr
 => [12, 435, 2, 767, 455, 455, 455, 455] 
3.0.0 :300 > arr.uniq!
 => [12, 435, 2, 767, 455]      permanentely remove all duplicate values from array. 
3.0.0 :301 > arr
 => [12, 435, 2, 767, 455] 


*********** Iterating over Arrays:--

22.  each {|element| ... } → self
each → Enumerator

Iterates over array elements.

When a block given, passes each successive array element to the block; returns self:
examples:--
3.0.0 :303 > arr.each {|i| print i,' '}
12 435 2 767 455  => [12, 435, 2, 767, 455] 


3.0.0 :002 > a=["hello",123,456.2]
 => ["hello", 123, 456.2] 
3.0.0 :003 > a.each {|i| puts "#{i.class} #{i}"}
String hello
Integer 123
Float 456.2
 => ["hello", 123, 456.2] 

23.  reverse_each {|element| ... } → self 
reverse_each → Enumerator

Iterates backwards over array elements.

When a block given, passes, in reverse order, each element to the block; returns self:
examples:-
3.0.0 :007 > a.reverse_each
 => #<Enumerator: ["hello", 123, 456.2]:reverse_each> 

3.0.0 :008 > a.reverse_each {|i| print i ,' '}

456.2 123 hello  => ["hello", 123, 456.2] 


** each_index {|index| ... } → self
each_index → Enumerator

Iterates over array indexes.

When a block given, passes each successive array index to the block; returns self:

examples:-

3.0.0 :269 > a
 => [1, 2, 3, 4, 5] 
3.0.0 :270 > a.each_index {|i| puts "#{i} #{a[i]}" }
0 1
1 2
2 3
3 4
4 5
 => [1, 2, 3, 4, 5] 

**  cycle {|element| ... } → nil 
cycle(count) {|element| ... } → nil
cycle → new_enumerator
cycle(count) → new_enumerator

When called with positive Integer argument count and a block, calls the block with each element, then does so again, until it has done so count times; returns nil:

examples:- 
3.0.0 :012 > a
 => [1, 2, 3, 4] 
3.0.0 :013 > b=[]
 => [] 
3.0.0 :014 > a.cycle(1) {|i| b.push(i) } 
 => nil 
3.0.0 :015 > b
 => [1, 2, 3, 4] 

***  combination(n) {|element| ... } → self 
combination(n) → new_enumerator

Calls the block, if given, with combinations of elements of self; returns self. The order of combinations is indeterminate.

When a block and an in-range positive Integer argument n (0 < n <= self.size) are given, calls the block with all n-tuple combinations of self.

examples:-

3.0.0 :016 > a
 => [1, 2, 3, 4] 
3.0.0 :017 > a.combination(2) {|i| p i }
[1, 2]
[1, 3]
[1, 4]
[2, 3]
[2, 4]
[3, 4]
 => [1, 2, 3, 4] 

3.0.0 :024 > a.combination(3) {|i| p i}  
[1, 2, 3]
[1, 2, 4]
[1, 3, 4]
[2, 3, 4]
 => [1, 2, 3, 4] 
 
 ***  permutation {|element| ... } → self
permutation(n) {|element| ... } → self
permutation → new_enumerator
permutation(n) → new_enumerator

When invoked with a block, yield all permutations of elements of self; returns self. The order of permutations is indeterminate.

When a block and an in-range positive Integer argument n (0 < n <= self.size) are given, calls the block with all n-tuple permutations of self.

examples:--

3.0.0 :026 > a.permutation(2) {|i| p i}
[1, 2]
[1, 3]
[1, 4]
[2, 1]
[2, 3]
[2, 4]
[3, 1]
[3, 2]
[3, 4]
[4, 1]
[4, 2]
[4, 3]
 => [1, 2, 3, 4] 

****  repeated_combination(n) {|combination| ... } → self click to toggle source
repeated_combination(n) → new_enumerator

Calls the block with each repeated combination of length n of the elements of self; each combination is an Array; returns self. The order of the combinations is indeterminate.

When a block and a positive Integer argument n are given, calls the block with each n-tuple repeated combination of the elements of self. The number of combinations is (n+1)(n+2)/2.

n = 1:

examples:--

3.0.0 :028 > a.repeated_combination(2) {|i| p i }
[1, 1]
[1, 2]
[1, 3]
[1, 4]
[2, 2]
[2, 3]
[2, 4]
[3, 3]
[3, 4]
[4, 4]
 => [1, 2, 3, 4] 


***  repeated_permutation(n) {|permutation| ... } → self
repeated_permutation(n) → new_enumerator

Calls the block with each repeated permutation of length n of the elements of self; each permutation is an Array; returns self. The order of the permutations is indeterminate.

When a block and a positive Integer argument n are given, calls the block with each n-tuple repeated permutation of the elements of self. The number of permutations is self.size**n.

n = 1:

example:--
3.0.0 :033 > a.repeated_permutation(2) {|i| p i }
[1, 1]
[1, 2]
[1, 3]
[1, 4]
[2, 1]
[2, 2]
[2, 3]
[2, 4]
[3, 1]
[3, 2]
[3, 3]
[3, 4]
[4, 1]
[4, 2]
[4, 3]
[4, 4]
 => [1, 2, 3, 4] 



24. The map method can be used to create a new array based on the original array, but with the values modified by the supplied block:

 map {|element| ... } → new_array 
map → new_enumerator

Calls the block, if given, with each element of self; returns a new Array whose elements are the return values from the block:

examples:-- 
3.0.0 :012 > a.map
 => #<Enumerator: ["hello", 123, 456.2]:map> 

3.0.0 :014 > a.map {|a| print a, ' '}
hello 123 456.2  => [nil, nil, nil] 


25. map! {|element| ... } → self
map! → new_enumerator

Calls the block, if given, with each element; replaces the element with the block's return value:
examples:--
3.0.0 :023 > a
 => [1, 3, 5, 7, 9, 2, 4] 

3.0.0 :024 > a.map! {|a| print a, ' '}
1 3 5 7 9 2 4  => [nil, nil, nil, nil, nil, nil, nil] 

3.0.0 :025 > a
 => [nil, nil, nil, nil, nil, nil, nil] 


****** Methods for creating new array:--

26.[] (*args) 

Returns a new array populated with the given objects.
examples:--
3.0.0 :028 > b=Array.[](1,2,3,4,5)
 => [1, 2, 3, 4, 5] 
3.0.0 :029 > b
 => [1, 2, 3, 4, 5] 

27.  new → new_empty_array
new(array) → new_array
new(size) → new_array
new(size, default_value) → new_array
new(size) {|index| ... } → new_array 
examples:--

3.0.0 :030 > a=Array.new(["hello","i","am","krishan"])
 => ["hello", "i", "am", "krishan"] 
3.0.0 :031 > a
 => ["hello", "i", "am", "krishan"] 

3.0.0 :032 > b=Array.new()
 => [] 
3.0.0 :033 > b=Array.new(3)
 => [nil, nil, nil] 

28.  try_convert(object) → object, new_array, or nil 

If object is an Array object, returns object.

Otherwise if object responds to :to_ary, calls object.to_ary and returns the result.

Returns nil if object does not respond to :to_ary

Raises an exception unless object.to_ary returns an Array object.
examples:--



*****Methods for Querying:--

29. all? → true or false
all? {|element| ... } → true or false
all?(obj) → true or false 
examples:--
3.0.0 :038 > a
 => ["hello", "i", "am", "krishan"] 
3.0.0 :039 > a.all?
 => true 
3.0.0 :040 > b
 => [nil, nil, nil] 
3.0.0 :041 > b.all?
 => false 

30.  any? → true or false 
any? {|element| ... } → true or false
any?(obj) → true or false 

examples:--
3.0.0 :042 > a
 => ["hello", "i", "am", "krishan"] 
3.0.0 :043 > a.any?
 => true 
3.0.0 :044 > b.any?
 => false 
3.0.0 :045 > b.push(1,2,3)
 => [nil, nil, nil, 1, 2, 3] 
3.0.0 :046 > b.any?
 => true 

3.0.0 :047 > [0,1,2].any? {|i| i>1}
 => true 
3.0.0 :048 > [0,1,2].any? {|i| i>2}
 => false 

31. none? → true or false
none? {|element| ... } → true or false
none?(obj) → true or false

Returns true if no element of self meet a given criterion.

With no block given and no argument, returns true if self has no truthy elements, false otherwise:
examples:--
3.0.0 :003 > b=[]
 => []                     none is true when every element of array is not meet given critertion.
3.0.0 :004 > b.none?
 => true 
3.0.0 :005 > b=[nil,nil]
 => [nil, nil] 
3.0.0 :006 > b.none?
 => true 
3.0.0 :007 > b=[1,nil]
 => [1, nil] 
3.0.0 :008 > b.none?
 => false 

3.0.0 :009 > a=[1,2,3]
 => [1, 2, 3] 
3.0.0 :010 > a.none? {|i| i>3}
 => true 
3.0.0 :011 > a.none? {|i| i>4}
 => true 
3.0.0 :012 > a.none? {|i| i>2}
 => false 

32.  one? → true or false 
one? {|element| ... } → true or false
one?(obj) → true or false

Returns true if exactly one element of self meets a given criterion.

With no block given and no argument, returns true if self has exactly one truthy element, false otherwise:

examples:- only on one element meet critertion then it is true otherwise false;

3.0.0 :013 > a
 => [1, 2, 3] 
3.0.0 :014 > b
 => [1, nil] 
3.0.0 :015 > a.one?
 => false 
3.0.0 :016 > b.one?
 => true 
3.0.0 :017 > b=[nil,1,3]
 => [nil, 1, 3] 
3.0.0 :018 > b.one?
 => false 

3.0.0 :023 > a.one? {|i| i<3}
 => false 
3.0.0 :024 > a.one? {|i| i<2}
 => true 
3.0.0 :025 > a
 => [1, 2, 3] 

33.  count → an_integer 
count(obj) → an_integer
count {|element| ... } → an_integer

Returns a count of specified elements.

With no argument and no block, returns the count of all elements:

examples:-

3.0.0 :026 > a
 => [1, 2, 3] 
3.0.0 :027 > a.count
 => 3 
3.0.0 :028 > b
 => [nil, 1, 3] 
3.0.0 :029 > b.count
 => 3 

3.0.0 :033 > a.count {|i| i < 3}
 => 2 
3.0.0 :034 > a
 => [1, 2, 3] 

34.  index(object) → integer or nil 
index {|element| ... } → integer or nil
index → new_enumerator

Returns the index of a specified element.

When argument object is given but no block, returns the index of the first element element for which object == element:

eaxmples:--

3.0.0 :035 > a
 => [1, 2, 3] 
3.0.0 :036 > a.index(2)
 => 1 
3.0.0 :037 > a.index(3)
 => 2 
3.0.0 :038 > a.push("hello","world")
 => [1, 2, 3, "hello", "world"] 
3.0.0 :039 > a.index("world")
 => 4 

3.0.0 :040 > a.index {|i| i == "world"}
 => 4 


35.  rindex(object) → integer or nil c
rindex {|element| ... } → integer or nil
rindex → new_enumerator

Returns the index of the last element for which object == element.

When argument object is given but no block, returns the index of the last such element found:

example:-

3.0.0 :042 > a
 => [1, 2, 3, "hello", "world", 1] 
3.0.0 :043 > a.rindex(1)                 it checks elements from right side and return first match only.
 => 5 


36.  hash → integer

Returns the integer hash value for self.

Two arrays with the same content will have the same hash code (and will compare using eql?):
examples:--

3.0.0 :044 > a
 => [1, 2, 3, "hello", "world", 1] 

3.0.0 :045 > a.hash
 => 4498992473896220533 

3.0.0 :046 > b=a
 => [1, 2, 3, "hello", "world", 1] 

3.0.0 :047 > b
 => [1, 2, 3, "hello", "world", 1] 

3.0.0 :048 > b.hash
 => 4498992473896220533 
 
 
 ****************** Methods for Comparing:--
 
 37.  array <=> other_array → -1, 0, or 1 

Returns -1, 0, or 1 as self is less than, equal to, or greater than other_array. For each index i in self, evaluates result = self[i] <=> other_array[i].

Returns -1 if any result is -1:

examples:--

3.0.0 :049 > a
 => [1, 2, 3, "hello", "world", 1] 
3.0.0 :050 > a <=> b
 => 0 
3.0.0 :051 > b
 => [1, 2, 3, "hello", "world", 1] 


3.0.0 :060 > [1,2,3] <=> [4,5,6]
 => -1 
3.0.0 :061 > [1,2,3] <=> [1,2,3]
 => 0 
3.0.0 :062 > [1,2,3] <=> [1,2,3,4]
 => -1 
3.0.0 :063 > [1,2,3] <=> [1,2]
 => 1 


38. array == other_array → true or false 

Returns true if both array.size == other_array.size and for each index i in array, array[i] == other_array[i]:

examples:--

3.0.0 :079 > a
 => [1, 2, 3, 4, 5] 
3.0.0 :080 > b
 => [1, 2, 3, 4] 
3.0.0 :081 > a == b
 => false 

3.0.0 :082 > b.push(5)
 => [1, 2, 3, 4, 5] 
3.0.0 :083 > a == b
 => true 

39.  eql? other_array → true or false

Returns true if self and other_array are the same size, and if, for each index i in self, self[i].eql? other_array[i]:

example:- 
3.0.0 :084 > a
 => [1, 2, 3, 4, 5] 
3.0.0 :085 > b
 => [1, 2, 3, 4, 5] 
3.0.0 :086 > a.eql?(b)
 => true 
3.0.0 :087 > a.pop
 => 5 
3.0.0 :088 > a.eql?(b)
 => false 



************* Methods for Fetching :--


40.  max → element
max {|a, b| ... } → element
max(n) → new_array
max(n) {|a, b| ... } → new_array

Returns one of the following:

    The maximum-valued element from self.

    A new Array of maximum-valued elements selected from self.

When no block is given, each element in self must respond to method <=> with an Integer.

With no argument and no block, returns the element in self having the maximum value per method <=>:

examples :--

3.0.0 :089 > a
 => [1, 2, 3, 4] 
3.0.0 :090 > a.max
 => 4 
3.0.0 :091 > a.max(3)
 => [4, 3, 2] 
3.0.0 :092 > a.max(4)
 => [4, 3, 2, 1] 

41.  minmax → [min_val, max_val]
minmax {|a, b| ... } → [min_val, max_val]

Returns a new 2-element Array containing the minimum and maximum values from self, either per method <=> or per a given block:.

When no block is given, each element in self must respond to method <=> with an Integer; returns a new 2-element Array containing the minimum and maximum values from self, per method <=>:

examples:--
                       it gets minimum and maximum values from array.
3.0.0 :093 > a
 => [1, 2, 3, 4] 
3.0.0 :094 > a.minmax
 => [1, 4] 

3.0.0 :004 > ['0', '00', '000'].minmax {|a, b| a.size <=> b.size }
 => ["0", "000"] 

3.0.0 :007 > ['1','3','60'].minmax {|a, b| a.size <=> b.size }
 => ["1", "60"] 


42.  assoc(obj) → found_array or nil 

Returns the first element in self that is an Array whose first element == obj:

examples:--

3.0.0 :012 > a=[[2,3,4],[4,5,6],[4,5,6,7]]
 => [[2, 3, 4], [4, 5, 6], [4, 5, 6, 7]] 
3.0.0 :013 > a.assoc(4)
 => [4, 5, 6] 
3.0.0 :014 > a.assoc(2)   it return first match with object at index 0 on first occurance.
 => [2, 3, 4] 

3.0.0 :015 > a.assoc(5)
 => nil 


43.   rassoc(obj) → found_array or nil 

Returns the first element in self that is an Array whose second element == obj:

examples:-- it takes the array where 1st index match the object and on first occurance.

3.0.0 :025 > a=[[1,2,3,4,5],[3,1,4,5,6],[54,6,45,767]]
 => [[1, 2, 3, 4, 5], [3, 1, 4, 5, 6], [54, 6, 45, 767]] 
3.0.0 :026 > a.rassoc(1)
 => [3, 1, 4, 5, 6] 
3.0.0 :027 > a.rassoc(6)
 => [54, 6, 45, 767] 

44.   values_at(*indexes) → new_array

Returns a new Array whose elements are the elements of self at the given Integer or Range indexes.

For each positive index, returns the element at offset index:
examples:--
 
 3.0.0 :031 > a
 => [[1, 2, 3, 4, 5], [3, 1, 4, 5, 6], [54, 6, 45, 767]] 

3.0.0 :032 > a[0]
 => [1, 2, 3, 4, 5] 

3.0.0 :033 > a[1]
 => [3, 1, 4, 5, 6] 

3.0.0 :034 > a.values_at(1,2)
 => [[3, 1, 4, 5, 6], [54, 6, 45, 767]] 


45.  dig(index, *identifiers) → object 

Finds and returns the object in nested objects that is specified by index and identifiers. The nested objects may be instances of various classes. See Dig Methods.

Examples:

3.0.0 :037 > a
 => [[1, 2, 3, 4, 5], [3, 1, 4, 5, 6], [54, 6, 45, 767]] 
3.0.0 :038 > a.dig(0)
 => [1, 2, 3, 4, 5] 
 => [3, 1, 4, 5, 6] 
3.0.0 :040 > a.dig(2)
 => [54, 6, 45, 767] 
3.0.0 :041 > a.dig(0,1)
 => 2 

46.  drop(n) → new_array 

Returns a new Array containing all but the first n element of self, where n is a non-negative Integer; does not modify self.

Examples:

3.0.0 :044 > a=[13,52,2,3,4,5,9]
 => [13, 52, 2, 3, 4, 5, 9] 
3.0.0 :045 > a.drop(2)
 => [2, 3, 4, 5, 9] 
3.0.0 :046 > a.drop(4)
 => [4, 5, 9] 

47.  drop_while {|element| ... } → new_array 
drop_while → new_enumerator

Returns a new Array containing zero or more trailing elements of self; does not modify self.

With a block given, calls the block with each successive element of self; stops if the block returns false or nil; returns a new Array omitting those elements for which the block returned a truthy value:

examples:--

3.0.0 :052 > a=[1,2,3,4,5,6,7]
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :053 > a.drop_while {|i| i < 4}
 => [4, 5, 6, 7] 

48.  take(n) → new_array

Returns a new Array containing the first n element of self, where n is a non-negative Integer; does not modify self.

Examples:

3.0.0 :054 > a
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :055 > a.take(3)
 => [1, 2, 3] 
3.0.0 :056 > a.take(5)
 => [1, 2, 3, 4, 5] 

49.  take_while {|element| ... } → new_array 
take_while → new_enumerator

Returns a new Array containing zero or more leading elements of self; does not modify self.

With a block given, calls the block with each successive element of self; stops if the block returns false or nil; returns a new Array containing those elements for which the block returned a truthy value:

examples:-

3.0.0 :057 > a
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.0 :058 > a.take_while {|i| i < 5}
 => [1, 2, 3, 4] 

3.0.0 :060 > a.take_while {|i| i < 3}
 => [1, 2] 


50. slice(index) → object or nil
slice(start, length) → object or nil
slice(range) → object or nil
slice(aseq) → object or nil

Returns elements from self; does not modify self.

When a single Integer argument index is given, returns the element at offset index:

examples:--

3.0.0 :061 > a
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :062 > a[3]
 => 4 
3.0.0 :063 > a[3,6]
 => [4, 5, 6, 7] 
3.0.0 :064 > a.slice(0)
 => 1 
3.0.0 :065 > a.slice(3,6)
 => [4, 5, 6, 7] 

3.0.0 :066 > a.slice(3..6)
 => [4, 5, 6, 7] 

51.  slice!(n) → object or nil
slice!(start, length) → new_array or nil
slice!(range) → new_array or nil

Removes and returns elements from self.

When the only argument is an Integer n, removes and returns the nth element in self:

examples:--       permanentely delete values from array .

3.0.0 :071 > a
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :072 > a.slice!(3..7)
 => [4, 5, 6, 7] 
3.0.0 :073 > a
 => [1, 2, 3] 


52.  sort → new_array 
sort {|a, b| ... } → new_array

Returns a new Array whose elements are those from self, sorted.

With no block, compares elements using operator <=> (see Comparable):

examples:--

3.0.0 :077 > a=[12,34,2,56,45]
 => [12, 34, 2, 56, 45] 
3.0.0 :078 > a.sort
 => [2, 12, 34, 45, 56] 

3.0.0 :081 > a
 => [12, 34, 2, 56, 45] 
3.0.0 :082 > a.sort {|a, b| a <=> b }
 => [2, 12, 34, 45, 56] 

53.  sort! → self
sort! {|a, b| ... } → self

Returns self with its elements sorted in place.

With no block, compares elements using operator <=> (see Comparable):

examples:-

3.0.0 :083 > a
 => [12, 34, 2, 56, 45] 
3.0.0 :084 > a.sort!
 => [2, 12, 34, 45, 56] 
3.0.0 :085 > a
 => [2, 12, 34, 45, 56] 

54.  reverse → new_array

Returns a new Array with the elements of self in reverse order.
example:--
3.0.0 :086 > a
 => [2, 12, 34, 45, 56] 
3.0.0 :087 > a.reverse
 => [56, 45, 34, 12, 2] 

55.  reverse! → self 

Reverses self in place:

 examples:--
 
 3.0.0 :090 > a
 => [2, 12, 34, 45, 56] 
3.0.0 :091 > a.reverse!
 => [56, 45, 34, 12, 2] 
3.0.0 :092 > a
 => [56, 45, 34, 12, 2] 

56.  select {|element| ... } → new_array click to toggle source
select → new_enumerator

Calls the block, if given, with each element of self; returns a new Array containing those elements of self for which the block returns a truthy value:

examples:--

3.0.0 :095 > a.select {|i| i.to_s.start_with?('3')}
 => [34] 

3.0.0 :096 > a
 => [56, 45, 34, 12, 2] 

3.0.0 :097 > a.select {|i| i.to_s.end_with?('2')}
 => [12, 2] 
 
 3.0.0 :099 > a.select
 => #<Enumerator: [56, 45, 34, 12, 2]:select> 


57.  select! {|element| ... } → self or nil
select! → new_enumerator

Calls the block, if given with each element of self; removes from self those elements for which the block returns false or nil.

Returns self if any elements were removed:

examples:--

3.0.0 :100 > a
 => [56, 45, 34, 12, 2] 
 
3.0.0 :102 > a.select! {|i| i.to_s.end_with?('2') }
 => [12, 2] 

3.0.0 :103 > a
 => [12, 2] 


58.  rotate → new_array
rotate(count) → new_array

Returns a new Array formed from self with elements rotated from one end to the other.

When no argument given, returns a new Array that is like self, except that the first element has been rotated to the last position:

example:--

3.0.0 :104 > a=[1,2,3,4,5,6]
 => [1, 2, 3, 4, 5, 6] 
3.0.0 :105 > a.rotate
 => [2, 3, 4, 5, 6, 1] 
3.0.0 :106 > a
 => [1, 2, 3, 4, 5, 6] 
3.0.0 :107 > a.rotate
 => [2, 3, 4, 5, 6, 1] 
3.0.0 :108 > a.rotate(3)
 => [4, 5, 6, 1, 2, 3] 

59.  rotate! → self
rotate!(count) → self

Rotates self in place by moving elements from one end to the other; returns self.

When no argument given, rotates the first element to the last position:
examples:--
3.0.0 :110 > a
 => [1, 2, 3, 4, 5, 6] 
3.0.0 :111 > a.rotate!(3)
 => [4, 5, 6, 1, 2, 3] 
3.0.0 :112 > a
 => [4, 5, 6, 1, 2, 3] 
 
 60.  bsearch {|element| ... } → object 
bsearch → new_enumerator

Returns an element from self selected by a binary search.

examples:--
3.0.0 :121 > a.sort
 => [1, 2, 3, 4, 5, 6] 
3.0.0 :122 > a.sort.bsearch {|i| i >= 4}
 => 4 
3.0.0 :123 > a.sort.bsearch {|i| i >= 3}
 => 3 


3.0.0 :114 > a.bsearch
 => #<Enumerator: [4, 5, 6, 1, 2, 3]:bsearch> 

61.  bsearch_index {|element| ... } → integer or nil 
bsearch_index → new_enumerator

Searches self as described at method bsearch, but returns the index of the found element instead of the element itself.

examples:--
3.0.0 :124 > a.sort.bsearch_index {|i| i >= 3}
 => 2 
3.0.0 :125 > a.sort.bsearch_index {|i| i >= 6}
 => 5 

62.  sample(random: Random) → object 
sample(n, random: Random) → new_ary

Returns random elements from self.

When no arguments are given, returns a random element from sel

examples:--

3.0.0 :126 > a
 => [4, 5, 6, 1, 2, 3] 
3.0.0 :127 > a.sample
 => 6 
3.0.0 :128 > a.sample
 => 5 
3.0.0 :129 > a.sample
 => 5 
3.0.0 :130 > a.sample
 => 6 
3.0.0 :131 > a.sample
 => 4 
3.0.0 :132 > a.sample(3)
 => [6, 4, 5] 

63.  shuffle(random: Random) → new_ary 

Returns a new array with elements of self shuffled.

examples:--

3.0.0 :135 > a
 => [1, 2, 3, 4, 5, 6] 

3.0.0 :136 > a.shuffle
 => [3, 1, 4, 5, 6, 2] 

3.0.0 :137 > a.shuffle
 => [4, 1, 3, 5, 6, 2] 


64.  shuffle!(random: Random) → array 

Shuffles the elements of self in place.
examples:--

3.0.0 :138 > a
 => [1, 2, 3, 4, 5, 6] 
3.0.0 :139 > a.shuffle!
 => [3, 4, 2, 6, 1, 5] 
3.0.0 :140 > a
 => [3, 4, 2, 6, 1, 5] 


     

*********  Methods for Assigning :--


65.  array[index] = object → object 
array[start, length] = object → object
array[range] = object → object

Assigns elements in self; returns the given object.

When Integer argument index is given, assigns object to an element in self.

If index is non-negative, assigns object the element at offset index:     

examples:--

3.0.0 :143 > a[0]=43
 => 43 
3.0.0 :144 > a[0]
 => 43 
3.0.0 :145 > a
 => [43, 4, 2, 6, 1, 5] 
3.0.0 :146 > a[0,1]="hello","world"
 => ["hello", "world"] 
3.0.0 :147 > a
 => ["hello", "world", 4, 2, 6, 1, 5] 

66.  push(*objects) → self

Appends trailing elements.

Appends each argument in objects to self; returns self:
examples:--

3.0.0 :154 > arr=[1,2,3]
 => [1, 2, 3] 
3.0.0 :155 > arr.push(4,5,6,7)
 => [1, 2, 3, 4, 5, 6, 7] 

67.  fill(obj) → self
fill(obj, start) → self
fill(obj, start, length) → self
fill(obj, range) → self
fill {|index| ... } → self
fill(start) {|index| ... } → self
fill(start, length) {|index| ... } → self
fill(range) {|index| ... } → self

Replaces specified elements in self with specified objects; returns self.

With argument obj and no block given, replaces all elements with that one object

examples:--

3.0.0 :157 > arr
 => [1, 2, 3, 4, 5, 6, 7] 
 
 3.0.0 :164 > arr.fill(1)
 => [1, 1, 1, 1, 1, 1, 1] 
 
 3.0.0 :165 > arr
 => [1, 1, 1, 1, 1, 1, 1] 
 
 3.0.0 :167 > arr.fill(2,3)
 => [1, 1, 1, 2, 2, 2, 2] 

3.0.0 :169 > arr.fill(5,2,4)
 => [1, 1, 5, 5, 5, 5, 3] 

3.0.0 :174 > arr
 => [1, 1, 5, 5, 5, 5, 3] 
3.0.0 :175 > arr.fill(4) {|i| "new_#{i}" }
 => [1, 1, 5, 5, "new_4", "new_5", "new_6"] 

68.  replace(other_array) → self 

Replaces the content of self with the content of other_array; returns self:

examples:--

3.0.0 :176 > arr
 => [1, 1, 5, 5, "new_4", "new_5", "new_6"] 
3.0.0 :177 > arr.replace([1,2,3,4,5])
 => [1, 2, 3, 4, 5] 
3.0.0 :178 > arr
 => [1, 2, 3, 4, 5] 


69.  sort_by! {|element| ... } → self
sort_by! → new_enumerator

Sorts the elements of self in place, using an ordering determined by the block; returns self.

Calls the block with each successive element; sorts elements based on the values returned from the block.

For duplicates returned by the block, the ordering is indeterminate, and may be unstable.

This example sorts strings based on their sizes

examples:--

3.0.0 :196 > a = ['aaaa', 'bbb', 'cc', 'd']
 => ["aaaa", "bbb", "cc", "d"] 
3.0.0 :197 > a.sort_by! {|i| i.size }
 => ["d", "cc", "bbb", "aaaa"] 



********** Methods for Deleting :--

70.   delete_if {|element| ... } → self 
delete_if → Enumerator

Removes each element in self for which the block returns a truthy value; returns self:

examples:--

3.0.0 :199 > arr
 => [1234, 345, 23, 3] 
3.0.0 :200 > arr.delete_if {|i| i < 10}
 => [1234, 345, 23] 
3.0.0 :201 > arr
 => [1234, 345, 23] 

3.0.0 :201 > arr
 => [1234, 345, 23] 
3.0.0 :202 > arr.delete_if {|i| i > 345}
 => [345, 23] 

71.  keep_if {|element| ... } → self 
keep_if → new_enumeration

Retains those elements for which the block returns a truthy value; deletes all other elements; returns self:

examples:--

3.0.0 :203 > arr=[34,45,12,56,70,43]
 => [34, 45, 12, 56, 70, 43] 
3.0.0 :204 > arr.keep_if {|i| i > 45}
 => [56, 70] 
3.0.0 :205 > arr
 => [56, 70] 

72.  reject! {|element| ... } → self or nil
reject! → new_enumerator

Removes each element for which the block returns a truthy value.

Returns self if any elements removed:
examples:--

3.0.0 :206 > arr=[34,45,12,56,70,43]
 => [34, 45, 12, 56, 70, 43] 
3.0.0 :207 > arr.reject! {|a| a <= 45}
 => [56, 70] 

3.0.0 :211 > arr
 => [56, 70] 
 
 3.0.0 :213 > arr.reject! {|a| a.to_s.end_with?('0') }
 => [56] 
3.0.0 :214 > arr
 => [56] 


************* Methods for Combining:--

73.  array & other_array → new_array

Returns a new Array containing each element found in both array and Array other_array; duplicates are omitted; items are compared using eql?:

examples:--
3.0.0 :215 > a=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 

3.0.0 :216 > b=[4,5,6,7,8,9]
 => [4, 5, 6, 7, 8, 9] 

3.0.0 :217 > a & b
 => [4, 5] 

74.  intersection(*other_arrays) → new_array

Returns a new Array containing each element found both in self and in all of the given Arrays other_arrays; duplicates are omitted; items are compared using eql?:

example:--

3.0.0 :221 > a
 => [1, 2, 3, 4, 5] 

3.0.0 :222 > b
 => [4, 5, 6, 7, 8, 9] 

3.0.0 :223 > c
 => [3, 4, 5] 

3.0.0 :224 > a.intersection(b,c)
 => [4, 5] 


75.  array + other_array → new_array

Returns a new Array containing all elements of array followed by all elements of other_array:

examples:--
3.0.0 :227 > a
 => [1, 2, 3, 4, 5] 

3.0.0 :228 > c
 => [3, 4, 5] 

3.0.0 :229 > a + c
 => [1, 2, 3, 4, 5, 3, 4, 5] 

76.  array - other_array → new_array

Returns a new Array containing only those elements from array that are not found in Array other_array; items are compared using eql?; the order from array is preserved:

examples:--

3.0.0 :230 > a
 => [1, 2, 3, 4, 5] 

3.0.0 :231 > b
 => [4, 5, 6, 7, 8, 9] 

3.0.0 :232 > b - a
 => [6, 7, 8, 9] 

3.0.0 :233 > a - b
 => [1, 2, 3] 


77.  array | other_array → new_array

Returns the union of array and Array other_array; duplicates are removed; order is preserved; items are compared using eql?:
examples:--

3.0.0 :234 > a
 => [1, 2, 3, 4, 5] 

3.0.0 :235 > b
 => [4, 5, 6, 7, 8, 9] 

3.0.0 :236 > a | b
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
 
 78.  union(*other_arrays) → new_array 

Returns a new Array that is the union of self and all given Arrays other_arrays; duplicates are removed; order is preserved; items are compared using eql?:

examples:--

3.0.0 :237 > a
 => [1, 2, 3, 4, 5] 
3.0.0 :238 > b
 => [4, 5, 6, 7, 8, 9] 
3.0.0 :239 > c
 => [3, 4, 5] 
3.0.0 :240 > a.union(b,c)
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 

79.  difference(*other_arrays) → new_array

Returns a new Array containing only those elements from self that are not found in any of the Arrays other_arrays; items are compared using eql?; order from self is preserved:

example:--

3.0.0 :243 > a
 => [1, 2, 3, 4, 5] 

3.0.0 :244 > b
 => [4, 5, 6, 7, 8, 9] 

3.0.0 :245 > c
 => [3, 4, 5] 

3.0.0 :246 > b.difference(a)
 => [6, 7, 8, 9] 

3.0.0 :247 > a.difference(b)
 => [1, 2, 3] 

80.  product(*other_arrays) → new_array
product(*other_arrays) {|combination| ... } → self

Computes and returns or yields all combinations of elements from all the Arrays, including both self and other_arrays.

    The number of combinations is the product of the sizes of all the arrays, including both self and other_arrays.

    The order of the returned combinations is indeterminate.

When no block is given, returns the combinations as an Array of Arrays:

examples:--

3.0.0 :254 > a
 => [1, 2, 3, 4, 5] 
3.0.0 :255 > c
 => [3, 4, 5] 
3.0.0 :256 > a.product(c)
 => [[1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5], [5, 3], [5, 4], [5, 5]] 





