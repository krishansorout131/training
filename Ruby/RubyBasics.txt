
--> Ruby Version Manager (RVM)

RVM is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.

* Installing Rvm:-

steps:-
curl -sSL https://rvm.io/mpapis.asc | gpg --import -
curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
curl -sSL https://get.rvm.io | bash -s stable
rvm --version

beryl@beryl-HP-ProBook-6460b:~$ rvm --version
rvm 1.29.12 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]


* installing Ruby latest version:-

--> rvm install ruby
--> rvm install 2.7

-->beryl@beryl-HP-ProBook-6460b:~$ rvm list
=> ruby-2.6.6 [ x86_64 ]
   ruby-2.7.2 [ x86_64 ]
 * ruby-3.0.0 [ x86_64 ]

# => - current
# =* - current && default
#  * - default


** rvm use command :-

beryl@beryl-HP-ProBook-6460b:~$ rvm use 3.0
Using /home/beryl/.rvm/gems/ruby-3.0.0

beryl@beryl-HP-ProBook-6460b:~$ rvm use 2.7.2
Using /home/beryl/.rvm/gems/ruby-2.7.2


* set any version of ruby as default version :-

beryl@beryl-HP-ProBook-6460b:~$ rvm use 2.7.2 --default
Using /home/beryl/.rvm/gems/ruby-2.7.2
beryl@beryl-HP-ProBook-6460b:~$ rvm list
   ruby-2.6.6 [ x86_64 ]
=* ruby-2.7.2 [ x86_64 ]
   ruby-3.0.0 [ x86_64 ]


 ** rvm help command
 beryl@beryl-HP-ProBook-6460b:~$ rvm help

  for example:

    rvm list                # list installed interpreters 
    rvm list known          # list available interpreters
    rvm install <version>   # install ruby interpreter
    rvm use <version>       # switch to specified ruby interpreter
    rvm remove <version>    # remove ruby interpreter (alias: delete)
    rvm get <version>       # upgrade rvm: stable, master

ruby installation
      fetch                   # download binary or sources for selected ruby version
      install                 # install ruby interpreter
      list                    # show currently installed ruby interpreters
      list known              # list available interpreters
      mount                   # install ruby from external locations
      patchset                # tools related to managing ruby patchsets
      pkg                     # install a dependency package
      reinstall               # reinstall ruby and run gem pristine on all gems
      remove                  # remove ruby and downloaded sources (alias: delete)
      requirements            # installs dependencies for building ruby
      uninstall               # uninstall ruby, keeping it's sources
      upgrade                 # upgrade to another ruby version, migrating gems

  running different ruby versions
      current                 # print current ruby version and name of used gemsets
      do                      # runs a command against specified and/or all rubies
      gemdir                  # display path to current gem directory ($GEM_HOME)
      use <version>           # switch to given (and already installed) ruby version
      use default             # switch to default ruby, or system if none is set
      use system              # switch to system ruby
      wrapper                 # creates wrapper executables for a given ruby & gemset


                                                      =====> Ruby Basics <====


-> Ruby is a dynamic, open source, object oriented and reflective programming language. Ruby is considered similar to Perl and Smalltalk programming languages. It runs on all types of platforms like Windows, Mac OS and all versions of UNIX.

-> It is fully object oriented programming language. Everything is an object in Ruby. Each and every code has their properties and actions. Here properties refer to variables and actions refer to methods.

-> Ruby is considered to follow the principle of POLA (principle of least astonishment). It means that the language behaves in such a way to minimize the confusion for experienced users.


* Let us write a simple program in ruby. All ruby files will have extension .rb So, put the following source code in a test.rb file.

  puts "Hello Rubby i am krishan sorout"
output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
Hello ruby i am krishan sorout 

* Whitespace in Ruby Program

Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they appear in strings. Sometimes, however, they are used to interpret ambiguous statements. Interpretations of this sort produce warnings when the -w option is enabled.
Example:-

a + b is interpreted as a+b ( Here a is a local variable)
a  +b is interpreted as a(+b) ( Here a is a method call)
  
 ** Line Endings in Ruby Program

Ruby interprets semicolons and newline characters as the ending of a statement. However, if Ruby encounters operators, such as +, −, or backslash at the end of a line, they indicate the continuation of a statement.

** Ruby Identifiers

Identifiers are names of variables, constants, and methods. Ruby identifiers are case sensitive. It means Ram and RAM are two different identifiers in Ruby.

Ruby identifier names may consist of alphanumeric characters and the underscore character ( _ ).

** Here Document in Ruby

"Here Document" refers to build strings from multiple lines. Following a << you can specify a string or an identifier to terminate the string literal, and all lines following the current line up to the terminator are the value of the string.

If the terminator is quoted, the type of quotes determines the type of the line-oriented string literal. Notice there must be no space between << and the terminator.

Here are different examples −


print <<EOF
   This is the first way of creating
   here document ie. multiple line string.
EOF

print <<"EOF";                # same as above
   This is the second way of creating
   here document ie. multiple line string.
EOF

print <<`EOC`                 # execute commands
	echo hi there
	echo lo there
EOC

print <<"foo", <<"bar"  # you can stack them
	I said foo.
foo
	I said bar.
bar

** Ruby BEGIN Statement
Syntax:-
puts "This line is not printed first"
BEGIN {
puts "this line always print first"
}

output:-- beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
this line always print first
This line is not printed first

** Ruby end statement:- 

END {
    puts "this line always printed in last"
}

puts "This line is not printed first"
BEGIN {
puts "this line always print first"
}

output:--
this line always print first
This line is not printed first
this line always printed in last

* Ruby Comments
-> multiple line comments

=begin
 this is a comment
 hii this is another way
 of multiple line comments
=end
-> single line comment in statement

puts "This line is not printed first"
BEGIN {
puts "this line always print first" # this is a comment
}
-> Another way of multiple line comment:-
# this is a comment
# this is a comment


**** Ruby - Classes and Objects:--

An object-oriented program involves classes and objects. A class is the blueprint from which individual objects are created. In object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles.

** Defining a Class in Ruby:-

A class in Ruby always starts with the keyword class followed by the name of the class. The name should always be in initial capitals. The class Customer can be displayed as −

class Customer
end

You terminate a class by using the keyword end. All the data members in the class are between the class definition and the end keyword.

** Creating Objects in Ruby using new Method:-

cust1 = Customer. new
cust2 = Customer. new

**Custom Method to Create Ruby Objects:--

class Customer
   @@no_of_customers = 0
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
end

cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")

** variables:- 

* Global variable :-
Global variables begin with $. Uninitialized global variables have the value nil and produce warnings with the -w option.

$globalvar=10
$var2=100
class Test 
    def check
        puts "global variable in class 1 is #$globalvar"
    end
end
obj1=Test.new
obj1.check        
class Test1
    def check1
        puts "this is second claas and global variable is #$var2"
    end
end
obj2=Test1.new
obj2.check1        

output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
global variable in class 1 is 10
this is second claas and global variable is 100

* Ruby Instance Variables:-
Instance variables begin with @. Uninitialized instance variables have the value nil and produce warnings with the -w option.

class Test 
    def initialize(id,name,addr)
        @id=id
        @name=name
        @addr=addr

    end 
    def details()
        puts "The id is #@id"
        puts "Name is #@name"
        puts "And the address is #@addr" 
    end
end

obj1=Test.new("1","krishan","hodal")
obj2=Test.new("2","mohit","palwal")
obj1.details()
obj2.details()

output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
The id is 1
Name is krishan
And the address is hodal
The id is 2
Name is mohit
And the address is palwal


*Ruby Class Variables

Class variables begin with @@ and must be initialized before they can be used in method definitions.

class Test 
    @@classvar=0
    def initialize(id,name,addr)
        @id=id
        @name=name
        @addr=addr

    end 
    def details()
        puts "The id is #@id"
        puts "Name is #@name"
        puts "And the address is #@addr" 
    end
    def classvar1()
        @@classvar +=1
        puts "no of values #@@classvar"
    end    
    puts "outside all functions #@@classvar"
end

obj1=Test.new("1","krishan","hodal")
obj2=Test.new("2","mohit","palwal")
obj1.details()
obj1.classvar1()
obj2.details()
obj2.classvar1()

output:--
outside all functions 0
The id is 1
Name is krishan
And the address is hodal
no of values 1
The id is 2
Name is mohit
And the address is palwal
no of values 2

* Ruby Local Variables

Local variables begin with a lowercase letter or _. The scope of a local variable ranges from class, module, def, or do to the corresponding end or from a block's opening brace to its close brace {}.

class Test
    def check()
        id=1
        name="krishan"
        puts " my id is #{id} and name is #{name}"
    end
end
a1=Test.new

a1.check()

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
 my id is 1 and name is krishan
 
 *Ruby Constants

Constants begin with an uppercase letter. Constants defined within a class or module can be accessed from within that class or module, and those defined outside a class or module can be accessed globally.

class Test
    Age=21
    def check()
        id=1
        name="krishan"
        puts " my id is #{id} and name is #{name} and my age is #{Age}"
    end
end
a1=Test.new

a1.check()

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
 my id is 1 and name is krishan and my age is 21
 
 
 *Ruby Pseudo-Variables

They are special variables that have the appearance of local variables but behave like constants. You cannot assign any value to these variables.

    self − The receiver object of the current method.

    true − Value representing true.

    false − Value representing false.

    nil − Value representing undefined.

    __FILE__ − The name of the current source file.

    __LINE__ − The current line number in the source file.

**Ruby if...else Statement

x=1
if x>2
    puts "X is greater then 2"
elsif x<=1 and x!=0
    puts "x is 1"   
else 
    puts "can't find the number"
end        

*Ruby if modifier
Syntax

code if condition

$a=10
print "hello\n" if $a

output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
hello

* uless statement and modifier:--

Ruby provides a special statement which is referred as unless statement. This statement is executed when the given condition is false. It is opposite of if statement. In if statement, the block executes once the given condition is true, however in unless statement, the block of code executes once the given condition is false.

x=10
unless x>=15
    puts" x is less then 15"
else 
    puts "x is greater then 15"    
end    

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
 x is less then 15
 
 unless modifier:-- unless works when condition is false .
 
 $var =  1
print "1 -- Value is set\n" if $var
print "2 -- Value is set\n" unless $var

$var = false
print "3 -- Value is set\n" unless $var

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
1 -- Value is set
3 -- Value is set

** Ruby case Statement
Syntax

case expression
[when expression [, expression ...] [then]
   code ]...
[else
   code ]
end

$today=8
case $today
when 0 .. 2
    puts "baby"
when 3 .. 6
    puts "little child" 
when 7..9
    puts"child"
else 
    puts "adult"
end    
    
    output:--
    beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
child


**Ruby while Statement
Syntax

while conditional [do]
   code
end

Executes code while conditional is true. A while loop's conditional is separated from code by the reserved word do, a newline, backslash \, or a semicolon ;.
Example:-
$i=0
$check=5
while $i <= $check do
    puts "Inside loop value of i is =#$i"
    $i +=1
end

output:--
Inside loop value of i is =0
Inside loop value of i is =1
Inside loop value of i is =2
Inside loop value of i is =3
Inside loop value of i is =4
Inside loop value of i is =5

** ruby while modifier:--

$i=0
$check=5
begin
    puts "Inside loop value of i is =#$i"
    $i +=1
end while $i<$check

output:-

Inside loop value of i is =0
Inside loop value of i is =1
Inside loop value of i is =2
Inside loop value of i is =3
Inside loop value of i is =4

*Ruby until Statement

until conditional [do]
   code
end

Executes code while conditional is false. An until statement's conditional is separated from code by the reserved word do, a newline, or a semicolon.

$i=0
$check=5
until $i >= $check do
    puts "Inside loop value of i is =#$i"
    $i +=1
end

output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
Inside loop value of i is =0
Inside loop value of i is =1
Inside loop value of i is =2
Inside loop value of i is =3
Inside loop value of i is =4

*Ruby until modifier
Syntax

code until conditional

OR

begin
   code
end until conditional

Executes code while conditional is false.

If an until modifier follows a begin statement with no rescue or ensure clauses, code is executed once before conditional is evaluated.
Example:-

$i=0
$check=5
begin
    puts "Inside loop value of i is =#$i"
    $i +=1
end until $i >  $check

outpit:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
Inside loop value of i is =0
Inside loop value of i is =1
Inside loop value of i is =2
Inside loop value of i is =3
Inside loop value of i is =4
Inside loop value of i is =5

*Ruby for Statement
Syntax

for variable [, variable ...] in expression [do]
   code
end

Executes code once for each element in expression.
Example:-
for i in 1..5
    puts "here i is #{i}"
end    
output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
here i is 1
here i is 2
here i is 3
here i is 4
here i is 5

* ruby each statement:-
(0..5).each do |i|
    puts "here i is #{i}"
end    
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
here i is 0
here i is 1
here i is 2
here i is 3
here i is 4
here i is 5

*Ruby break Statement
Syntax

break

Terminates the most internal loop. Terminates a method with an associated block if called within the block (with the method returning nil).
Example:-

for i in (0..5)
    if i>=2
        break
    end
    puts "here i is #{i}"
end        

output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
here i is 0
here i is 1


