******* Integer

An Integer object represents an integer value.

You can create an Integer object explicitly with: An integer literal.

You can convert certain objects to Integers with: Method Integer.

An attempt to add a singleton method to an instance of this class causes an exception to be raised.


1. sqrt(numeric) → integer click to toggle source

Returns the integer square root of the non-negative integer n, which is the largest non-negative integer less than or equal to the square root of numeric.
example:-

3.0.0 :429 > Integer.sqrt(4)
 => 2 
3.0.0 :430 > Integer.sqrt(9)
 => 3 
3.0.0 :431 > Integer.sqrt(18)
 => 4 
3.0.0 :432 > Integer.sqrt(21)
 => 4 
3.0.0 :433 > Integer.sqrt(24)
 => 4 
3.0.0 :434 > Integer.sqrt(25)
 => 5 

2.  try_convert(object) → object, integer, or nil

If object is an Integer object, returns object
example:--




3.  self % other → real_number

Returns self modulo other as a real number.

For integer n and real number r, these expressions are equivalent:
example:--
a=10
b=2
puts a%b
output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/RubyPractical$ ruby test.rb
0

3.0.0 :441 > 34%3
 => 1 

4.  self & other → integer 

Bitwise AND; each bit in the result is 1 if both corresponding bits in self and other are 1, 0 otherwise:

examples:--
3.0.0 :443 > 7 & 5
 => 5 
3.0.0 :444 > 10 & 6
 => 2 
3.0.0 :445 > 10 & 2
 => 2 
3.0.0

here 10in bits= 00001010
     2 in bits= 00000010
     10&2=      00000010 it means 2.
 
 5.  self * numeric → numeric_result 

Performs multiplication:
examples:--

3.0.0 :446 > 10*2
 => 20 
3.0.0 :447 > 2*2
 => 4 
3.0.0 :448 > 23*1
3.0.0 :449 > 4 * 2.0
 => 8.0 
3.0.0 :450 > 4 * Rational(1,3)
 => (4/3) 
3.0.0 :452 > 4 * Complex(2,0)
 => (8+0i) 

6.  self ** numeric → numeric_result click to toggle source

Raises self to the power of numeric:
examples:-
3.0.0 :453 > 2 ** 3
 => 8 
3.0.0 :454 > 3 **2
 => 9 
3.0.0 :455 > 2 ** -3
 => (1/8) 
 
 7.  self + numeric → numeric_result click to toggle source

Performs addition:
example:--
3.0.0 :456 > 2 + 3
 => 5 
3.0.0 :457 > 45 + 45
 => 90
 
8.self - numeric → numeric_result click to toggle source

Performs subtraction:
example:-- 3.0.0 :458 > 335 - 43
 => 292 
3.0.0 :459 > 10 - 2
 => 8 

9.  -int → integer click to toggle source

Returns int, negated.
example:--

3.0.0 :460 > -3
 => -3 
3.0.0 :461 > -535
 => -535 

10.  self / numeric → numeric_result

Performs division; for integer numeric, truncates the result to an integer:
example:--
3.0.0 :463 > 4 / 2
 => 2 
3.0.0 :464 > 9 / 2
 => 4 

3.0.0 :465 > 4 / -3
 => -2 
3.0.0 :466 > -4 / -3
 => 1 


 self < other → true or false

Returns true if the value of self is less than that of other
examples:- 
3.0.0 :467 > 5 < 3
 => false 
3.0.0 :468 > 6 > 5
 => true 

11.  self << count → integer

Returns self with bits shifted count positions to the left, or to the right if count is negative:
examples:--

3.0.0 :481 > 9 << 3
 => 72 
3.0.0 :482 > 4 << 3
 => 32 


12. self <= real → true or false

Returns true if the value of self is less than or equal to that of other:
examples:--
3.0.0 :483 > 4 <= 2
 => false 
3.0.0 :484 > 4 <= 8
 => true
 
 13.  self <=> other → -1, 0, +1, or nil

Returns:

    -1, if self is less than other.

    0, if self is equal to other.

    1, if self is greater then other.

    nil, if self and other are incomparable.

Examples:
3.0.0 :485 > 5 <=> 5
 => 0 
3.0.0 :486 > 5 <=> 6
 => -1 
3.0.0 :487 > 5 <=> 3
 => 1 
3.0.0 :488 > 5 <=> a
 => nil 

14.  self == other → true or false

Returns true if self is numerically equal to other; false otherwise.
examples;-

3.0.0 :489 > 5 == 4
 => false 
3.0.0 :490 > 4 == 4
 => true 
 
 15.  self[offset] → 0 or 1
self[offset, size] → integer
self[range] → integer

Returns a slice of bits from self.

With argument offset, returns the bit at the given offset, where offset 0 refers to the least significant bit:

examples:-
3.0.0 :491 > a=12312345
 => 12312345 
3.0.0 :492 > a[0]
 => 1 
3.0.0 :493 > a[2]
 => 0 
3.0.0 :494 > a[3]
 => 1 
 
 16.  self ^ other → integer

Bitwise EXCLUSIVE OR; each bit in the result is 1 if the corresponding bits in self and other are different, 0 otherwise:

examples:--
 3.0.0 :495 >  9 ^ 3
 => 10 
 description:-- 9= 00001001
                3= 00000011
                   00001010 it means 10 because 1 1 means 0 and 1 0 means 1 or 0 1 means 1 here
                   
                   
  17.  abs → integer 
magnitude → integer

Returns the absolute value of int.
examples:--
3.0.0 :001 > 123.abs
 => 123 
3.0.0 :002 > 123.23.abs
 => 123.23 
3.0.0 :003 > -145.abs
 => 145 
3.0.0 :004 > 

18.  allbits?(mask) → true or false

Returns true if all bits that are set (=1) in mask are also set in self; returns false otherwise.

Example values:
3.0.0 :005 > 9.allbits?(3)
 => false 
3.0.0 :006 > 7.allbits?(3)
 => true 

19.  anybits?(mask) → true or false 

Returns true if any bit that is set (=1) in mask is also set in self; returns false otherwise.

Example values:

3.0.0 :007 > 7.anybits?(3)
 => true 
3.0.0 :008 > 9.anybits?(3)
 => true 
3.0.0 :009 > 8.anybits?(3)
 => false 
3.0.0 :010 > 8.anybits?(8)
 => true 
3.0.0 :011 > 11.anybits?(2)
 => true 
3.0.0 :012 > 8.anybits?(7)
 => false 

20. bit_length → integer

Returns the number of bits of the value of int.

“Number of bits” means the bit position of the highest bit which is different from the sign bit (where the least significant bit has bit position 1). If there is no such bit (zero or minus one), zero is returned.

3.0.0 :013 > 7.bit_length
 => 3 
3.0.0 :014 > 8.bit_length
 => 4 
3.0.0 :015 > 16.bit_length
 => 5 
3.0.0 :016 > 32.bit_length
 => 6 

21. ceil(ndigits = 0) → integer 

Returns the smallest number greater than or equal to self with a precision of ndigits decimal digits.

When the precision is negative, the returned value is an integer with at least ndigits.abs trailing zeros:
exaples:-
3.0.0 :017 > 555.ceil(-1)
 => 560 
3.0.0 :018 > 555.ceil(-2)
 => 600 


22. chr → string 
chr(encoding) → string

Returns a 1-character string containing the character represented by the value of self, according to the given encodin
examples:-

3.0.0 :023 > 65.chr
 => "A" 
3.0.0 :024 > 32.chr
 => " " 
3.0.0 :025 > a=255.chr(Encoding::UTF_8)
 => "ÿ" 
3.0.0 :026 > a.encoding
 => #<Encoding:UTF-8> 

23.  coerce(numeric) → array 

Returns an array with both a numeric and a big represented as Bignum objects.

This is achieved by converting numeric to a Bignum.

A TypeError is raised if the numeric is not a Fixnum or Bignum type.
examples:-


24. denominator → 1 

Returns 1.
example:-
3.0.0 :028 > 32.denominator
 => 1 
3.0.0 :029 > 323.denominator
 => 1 

25.  digits(base = 10) → array_of_integers

Returns an array of integers representing the base-radix digits of self; the first element of the array represents the least significant digit:
example:-
3.0.0 :032 > 9.digits(2)
 => [1, 0, 0, 1] 

3.0.0 :030 > 12345.digits
 => [5, 4, 3, 2, 1] 

26.  div(numeric) → integer 

Performs integer division; returns the integer result of dividing self by numeric:
examples:-
3.0.0 :034 > 4.div(3)
 => 1 
3.0.0 :035 > 9.div(3)
 => 3 
3.0.0 :036 > 15.div(2)
 => 7 

27.divmod(other) → array

Returns a 2-element array [q, r], where
examples:-
3.0.0 :037 > 5.divmod(3)
 => [1, 2] 
3.0.0 :038 > 11.divmod(3)
 => [3, 2] 
3.0.0 :039 > 11.divmod(4)
 => [2, 3] 

28.  downto(limit) {|i| ... } → self
downto(limit) → enumerator

Calls the given block with each integer value from self down to limit; returns self:
examples:-
3.0.0 :040 > a=[]
 => [] 
3.0.0 :041 > 10.downto(5) {|i| a << i}
 => 10 
3.0.0 :042 > a
 => [10, 9, 8, 7, 6, 5] 

29 .  each()
Alias for: times 
examples:--
 3.0.0 :048 > a
 => [10, 9, 8, 7, 6, 5] 
3.0.0 :049 > a.each
 => #<Enumerator: [10, 9, 8, 7, 6, 5]:each> 
 
 
 30.  even? → true or false

Returns true if int is an even number.
examples:-
3.0.0 :050 > 4.even?
 => true 
3.0.0 :051 > 5.even?
 => false 
3.0.0 :052 > 13.even?
 => false 

31.  fdiv(numeric) → float 

Returns the Float result of dividing self by numeric:
examples:--
3.0.0 :053 > 4.fdiv(2)
 => 2.0 
3.0.0 :054 > 4.fdiv(-2)
 => -2.0 
3.0.0 :055 > 4.fdiv(2.0)
 => 2.0 

32.  floor(ndigits = 0) → integer

Returns the largest number less than or equal to self with a precision of ndigits decimal digits.

When ndigits is negative, the returned value has at least ndigits.abs trailing zeros:
examples:-
3.0.0 :056 > 7.floor(3)
 => 7 
3.0.0 :057 > 555.floor(-1)
 => 550
 
 33.  gcd(other_int) → integer 

Returns the greatest common divisor of the two integers. The result is always positive. 0.gcd(x) and x.gcd(0) return x.abs.

examples:-
.0.0 :058 > 36.gcd(60)
 => 12 
3.0.0 :059 > 2.gcd(4)
 => 2 
3.0.0 :060 > 3.gcd(5)
 => 1 

34. gcdlcm(other_int) → array

Returns an array with the greatest common divisor and the least common multiple of the two integers, [gcd, lcm].
examples:-
3.0.0 :061 > 10.gcdlcm(13)
 => [1, 130] 
3.0.0 :062 > 36.gcdlcm(60)
 => [12, 180] 
 
 35.  inspect(*args)
Alias for: to_s 
examples:-
3.0.0 :066 > 1234.inspect
 => "1234"
 
 36. integer? → true 

Since int is already an Integer, this always returns true.
examples:-
3.0.0 :072 > 123.integer?
 => true 
3.0.0 :073 > 4536.53.integer?
 => false 

37.  lcm(other_int) → integer 

Returns the least common multiple of the two integers. The result is always positive. 0.lcm(x) and x.lcm(0) return zero.
examples;-

3.0.0 :074 > 4.lcm(8)
 => 8 
3.0.0 :075 > 36.lcm(60)
 => 180 

38.  succ → next_integer 

Returns the successor integer of self (equivalent to self + 1):
examples:-

3.0.0 :078 > 1.succ
 => 2 
3.0.0 :079 > 34.succ
 => 35 

39.  nobits?(mask) → true or false 

Returns true if no bit that is set (=1) in mask is also set in self; returns false otherwise.

Example values:
3.0.0 :080 > 8.nobits?(4)
 => true 
3.0.0 :081 > 8.nobits?(2)
 => true 
3.0.0 :082 > 8.nobits?(1)
 => true 
3.0.0 :083 > 8.nobits?(9)
 => false 
3.0.0 :084 > 8.nobits?(10)
 => false 

explaination:-- 8= 00001000
                4= 00000100 so no value is 1 from each side at same place. so it is true.
                
                8= 00001000
                9= 00001001  now it is false because there is 1 on both side at same place.


40.  numerator → self 

Returns self.
examples:-
3.0.0 :085 > 5.numerator
 => 5 
3.0.0 :086 > 23.numerator
 => 23 
 
 41.  odd? → true or false 

Returns true if int is an odd number.
examples:--
3.0.0 :089 > 3.odd?
 => true 
3.0.0 :090 > 11.odd?
 => true 
3.0.0 :091 > 1.odd?
 => true 
3.0.0 :092 > 2.odd?
 => false 
3.0.0 :093 > 12.odd?
 => false 

42.  ord → self

Returns the int itself:-

3.0.0 :094 > 5.ord
 => 5 
3.0.0 :095 > 34.ord
 => 34 

43.  pow(numeric) → numeric
pow(integer, integer) → integer

Returns (modular) exponentiation as:
examples:-
3.0.0 :096 > 2.pow(3)
 => 8 
3.0.0 :097 > 3.pow(2)
 => 9 
3.0.0 :098 > 3.pow(2, 2)
 => 1 
3.0.0 :099 > 8.pow(2,2)
 => 0 

44.  pred → next_integer 

Returns the predecessor of self (equivalent to self - 1):
examples:-
3.0.0 :100 > 1.pred
 => 0 
3.0.0 :101 > 2.pred
 => 1 
3.0.0 :102 > 34.pred
 => 33 

45.  rationalize([eps]) → rational

Returns the value as a rational. The optional argument eps is always ignored.
examples:-
3.0.0 :105 > 12.rationalize()
 => (12/1) 
3.0.0 :106 > 45.rationalize()
 => (45/1) 

46.  remainder(other) → real_number 

Returns the remainder after dividing self by other.
examples:--

3.0.0 :108 > 11.remainder(3)
 => 2 
3.0.0 :109 > 31.remainder(3)
 => 1 
3.0.0 :110 > 45.remainder(4)
 => 1 

47. round(ndigits= 0, half: :up) → integer 

Returns self rounded to the nearest value with a precision of ndigits decimal digits.

When ndigits is negative, the returned value has at least ndigits.abs trailing zeros:
examples:-
3.0.0 :111 > 555.round(-1)
 => 560 
3.0.0 :112 > 555.round(-2)
 => 600 

48. size → int 

Document-method: Integer#size

Returns the number of bytes in the machine representation of int (machine dependent).

examples:-
3.0.0 :113 > 1.size
 => 8 
3.0.0 :114 > 45666.size
 => 8 
3.0.0 :115 > (2 ** 24).size
 => 8 

49.  times {|i| ... } → self 
times → enumerator

Calls the given block self times with each integer in (0..self-1):
examples:-
3.0.0 :117 > a=[]
 => [] 
3.0.0 :118 > 5.times {|i| a.push(i)}
 => 5 
3.0.0 :119 > a
 => [0, 1, 2, 3, 4] 
 
 50.  to_f → float

Converts self to a Float:
example:=
3.0.0 :120 > 23.to_f
 => 23.0 
3.0.0 :121 > 32.2.to_f
 => 32.2 

51.  to_i → integer

Since int is already an Integer, returns self.

to_int is an alias for to_i.
examples:-
3.0.0 :123 > 12.to_i
 => 12 
3.0.0 :124 > "123".to_i
 => 123 

52.  to_r → rational click to toggle source

Returns the value as a rational.
examples:-
3.0.0 :125 > "123".to_r
 => (123/1) 
3.0.0 :126 > 23.to_r
 => (23/1) 

52.  to_s(base = 10) → string

Returns a string containing the place-value representation of self in radix base (in 2..36).
examples:-
3.0.0 :127 > 123.to_s
 => "123" 
3.0.0 :128 > 12.to_s(2)
 => "1100" 
3.0.0 :129 > 12.to_s(8)
 => "14" 

53.  truncate(ndigits = 0) → integer 

Returns self truncated (toward zero) to a precision of ndigits decimal digits.

When ndigits is negative, the returned value has at least ndigits.abs trailing zeros:
examples:-
3.0.0 :130 > 444.truncate(-1)
 => 440 
3.0.0 :131 > 444.truncate(-2)
 => 400 
3.0.0 :132 > 444.truncate(-3)
 => 0 
3.0.0 :133 > 444.truncate(-4)
 => 0 

54.  upto(limit) {|i| ... } → self 
upto(limit) → enumerator

Calls the given block with each integer value from self up to limit; returns self
examples:- 
3.0.0 :138 > 5.upto(8) {|i| a << i}
 => 5 
3.0.0 :139 > a
 => [5, 6, 7, 8] 

55.   zero? → true or false click to toggle source

Returns true if int has a zero value.

examples:--
3.0.0 :141 > a=123
 => 123 
3.0.0 :142 > a.zero?
 => false 
3.0.0 :143 > 34.zero?
 => false 
3.0.0 :144 > 0.zero?
 => true 

56. self | other → integer 

Bitwise OR; each bit in the result is 1 if either corresponding bit in self or other is 1, 0 otherwise:
examples:-
3.0.0 :145 > (4|2)
 => 6 
3.0.0 :146 > 8|9
 => 9 

57.  ~int → integer click to toggle source

One's complement: returns a number where each bit is flipped.

Inverts the bits in an Integer. As integers are conceptually of infinite length, the result acts as if it had an infinite number of one bits to the left. In hex representations, this is displayed as two periods to the left of the digits.
examples:--
3.0.0 :147 > ~45
 => -46 
3.0.0 :148 > ~234
 => -235 

58. 
