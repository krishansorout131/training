                    ===================Linux===================

Basic commands---


1. pwd :- pwd command is used to print the working directory.

syntax:- pwd

output:-/home/beryl


2. mkdir :- The mkdir command is used to create a new directory under any directory.

syntax:- mkdir Linux

output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop$ mkdir linuxcomm
beryl@beryl-HP-ProBook-6460b:~/Desktop$ 

To make multiple directories
Syntax:
    1. mkdir <dirname1> <dirname2> <dirname3> ...  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop$ mkdir abc.txt aaa.txt bbb.txt
beryl@beryl-HP-ProBook-6460b:~/Desktop$ 
beryl@beryl-HP-ProBook-6460b:~/Desktop$ ls
 aaa.txt   abc.txt   bbb.txt   linux  'Linux com.odt'

mkdir -p
With the help of mkdir -p command you can create sub-directories of a directory.
Syntax:-   mkdir -p linux/ajay
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop$ mkdir -p linux/ajay
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
ajay  krishan  mohit

mkdir -v
'mkdir -v' command will print a message with every new file created.
Syntax:-     mkdir -v file1 fle2


output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ mkdir -v file1 fle2
mkdir: created directory 'file1'
mkdir: created directory 'fle2'

mkdir -pv  :- By combining -p you can create a long list files together like "office/client/raj/date/day"with a printed message for each file.


syntax:-  mkdir -pv file1/file2/file3/fie4
output:-

beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ mkdir -pv file1/file2/fe3/fil4
mkdir: created directory 'file1'
mkdir: created directory 'file1/file2'
mkdir: created directory 'file1/file2/fe3'
mkdir: created directory 'file1/file2/fe3/fil4'
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

mkdir -m=MODE
With the help of this command, you can access the permission on the directory you are creating. Access means to give the authority to read(r), write(w), and execute(x). You can access the permission in different ways to your directory.

For full access, command will be 
       
       syntax:- mkdir -m=rwx <file>  
      
      syntax:- mkdir -m 777 <file>  	
      output:-
      beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ mkdir -m=rwx qwe1
      beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
      ajay  file1  krishan  mohit  qwe1
      	
For read and write, command will be

	syntax:- mkdir -m=rw <file>

For read only/ write only/ eecute only, command will be

syntax:-mkdir -m=r <file>"/ "mkdir -m=w <file>"/ "mkdir -m=x <file>/  



3.rmdir Command
The rmdir command is used to delete a directory.
Syntax:- rmdir <directory Name>
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop$ rmdir linuxcomm
beryl@beryl-HP-ProBook-6460b:~/Desktop$ ls
 krishan   linux  'Linux com.odt'   os

rmdir -p
This command will delete a directory including its sub-directories all at once. I
Syntax:-  rmdir -p kk/jk/mk
 
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ rmdir -p kk/jk/mk
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
ajay  file1  krishan  mohit  qwe1

4. ls Command
The ls command is used to display a list of content of a directory.
Syntax:ls
output:-  
beryl@beryl-HP-ProBook-6460b:~/Desktop$ ls
 krishan   linux  'Linux com.odt'   os

Linux ls command options
ls option
Description
ls -a
In Linux, hidden files start with . (dot) symbol and they are not visible in the regular directory. The (ls -a) command will enlist the whole list of the current directory including the hidden files.
ls -l
It will show the list in a long list format.
ls -lh
This command will show you the file sizes in human readable format. Size of the file is very difficult to read when displayed in terms of byte. The (ls -lh)command will give you the data in terms of Mb, Gb, Tb, etc.
ls -lhS
If you want to display your files in descending order (highest at the top) according to their size, then you can use (ls -lhS) command.
ls -l - -block-size=[SIZE]
It is used to display the files in a specific size format. Here, in [SIZE] you can assign size according to your requirement.
ls -d */
It is used to display only subdirectories.
ls -g or ls -lG
With this you can exclude column of group information and owner.
ls -n
It is used to print group ID and owner ID instead of their names.
ls --color=[VALUE]
This command is used to print list as colored or discolored.
ls -li
This command prints the index number if file is in the first column.
ls -p
It is used to identify the directory easily by marking the directories with a slash (/) line sign.
ls -r
It is used to print the list in reverse order.
ls -R
It will display the content of the sub-directories also.
ls -lX
It will group the files with same extensions together in the list.
ls -lt
It will sort the list by displaying recently modified filed at top.
ls ~
It gives the contents of home directory.
ls ../
It give the contents of parent directory.
ls --version
It checks the version of ls command.

5. cd Command
The cd command is used to change the current directory.
Syntax:
    1. cd <directory name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop$ cd linux
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 
6. touch Command
The touch command is used to create empty files. We can create multiple empty files by executing it once.
Syntax:
    1. touch <file name>  
    2. touch <file1>  <file2> ....  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ touch krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
krishan
touch -a command
touch command with option 'a' is used to change the access time of a file. By default, it will take the current time of your system.
Syntax:
    1. touch -a <filename>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat krishan
  File: krishan
  Size: 47        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175116     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 17:12:21.209683433 +0530
Modify: 2021-12-20 14:42:27.439909624 +0530
Change: 2021-12-20 17:12:21.209683433 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ touch -a krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat krishan
  File: krishan
  Size: 47        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175116     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 17:14:46.850831427 +0530
Modify: 2021-12-20 14:42:27.439909624 +0530
Change: 2021-12-20 17:14:46.850831427 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

touch -m command
The touch '-m' option will help you to change only the modification time of a file.
Syntax:
    1. touch -m <filename>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat krishan
  File: krishan
  Size: 47        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175116     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 17:14:46.850831427 +0530
Modify: 2021-12-20 14:42:27.439909624 +0530
Change: 2021-12-20 17:14:46.850831427 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ touch -m krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat krishan
  File: krishan
  Size: 47        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175116     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 17:14:46.850831427 +0530
Modify: 2021-12-20 17:24:44.919090983 +0530
Change: 2021-12-20 17:24:44.919090983 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

touch -r option
This command will update time with reference to the other mentioned command. 
Syntax:-  touch -r demo.txt Demo.txt  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat krishan
  File: krishan
  Size: 47        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175116     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 17:14:46.850831427 +0530
Modify: 2021-12-20 17:24:44.919090983 +0530
Change: 2021-12-20 17:24:44.919090983 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat mohit
  File: mohit
  Size: 14        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175117     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 14:49:28.319273844 +0530
Modify: 2021-12-20 14:49:16.570838377 +0530
Change: 2021-12-20 14:49:16.570838377 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ touch -r krishan mohit
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat mohit
  File: mohit
  Size: 14        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175117     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 17:14:46.850831427 +0530
Modify: 2021-12-20 17:24:44.919090983 +0530
Change: 2021-12-20 17:43:05.398762351 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

touch -t command
with this command, you can change the access time of a file by determining a specified time to it.
It will modify the time by specified time instead of default time.
Syntax:-  touch -t YYYYMMDDhhmm.ss  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat krishan
  File: krishan
  Size: 47        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175116     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2021-12-20 17:14:46.850831427 +0530
Modify: 2021-12-20 17:24:44.919090983 +0530
Change: 2021-12-20 17:24:44.919090983 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ touch -t 201610101212.12 krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ stat krishan
  File: krishan
  Size: 47        	Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d	Inode: 9175116     Links: 1
Access: (0664/-rw-rw-r--)  Uid: ( 1000/   beryl)   Gid: ( 1000/   beryl)
Access: 2016-10-10 12:12:12.000000000 +0530
Modify: 2016-10-10 12:12:12.000000000 +0530
Change: 2021-12-20 17:54:52.750994924 +0530
 Birth: -
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

touch -c command
Using 'c' option with touch command will not create an empty file, if that file doesn't exist.
Syntax:
    1. touch -c <filename>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ touch -c abcdef.txt
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
ajay  file1  krishan  mohit  qwe1
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


7. cat Command
The cat command is a multi-purpose utility in the Linux system. It can be used to create a file, display content of the file, copy the content of one file to another file, and more.
Syntax:
    1. cat [OPTION]... [FILE]..  
To create a file, execute it as follows:
    1. cat > <file name>  
    2. // Enter file content  
Press "CTRL+ D" keys to save the file. To display the content of the file, execute it as follows:
    1. cat <file name>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat> mohit
hii i am krishan sorout try to use cat command                                
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
krishan  mohit
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat mohit
hii i am krishan sorout try to use cat command
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

===>  copy the content from old file to another  file/new file
cat mohit> krishan
 cat krishan
output is same like cat mohit
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat mohit> krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat krishan
hii i am krishan sorout try to use cat command

====> cat [file1 file2 and so on] > [new file name]   To concatenate contents of multiple files into one.

Output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat krishan mohit > ajay
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat krishan
hii i am krishan sorout try to use cat command
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat mohit
this is mohit.beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat ajay
hii i am krishan sorout try to use cat command
this is mohit.beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

==> cat -n command (to display line numbers)
Syntax:
    1. cat -n <fileName>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat -n ajay
     1	hii i am krishan sorout try to use cat command
     2	this is mohit.beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


==> The 'cat-e' option displays a '$' sign at the end of every line.
Syntax:
    1. cat -e <fileName>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat -e ajay
hii i am krishan sorout try to use cat command$
this is mohit.$
hii i am krishan sorout try to use cat command$
this is mohit.$
hii i am krishan sorout try to use cat command$
this is mohit.$

==>  The 'cat << EOF ' option displays an end marker at the end of a file. It is called here directive and file content will be saved at the given end marker.

Syntax:- cat > abc >>EOF
output:-


8. rm Command
The rm command is used to remove a file.
Syntax:
rm <file name>
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
ajay  file1  krishan  mohit  qwe1
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ rm mohit
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
ajay  file1  krishan  qwe1
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


Linux rm *extension
This command can be used to remove all the files ending with same extensions like .pdf, .txt, .odt, .png, etc.
Syntax:
    1. rm *<extension>  
output:-
beryl@beryl-HP-ProBook-6460b:~/linux/krishan$ touch abc.odt
beryl@beryl-HP-ProBook-6460b:~/linux/krishan$ ls
abc.odt
beryl@beryl-HP-ProBook-6460b:~/linux/krishan$ rm *.odt
beryl@beryl-HP-ProBook-6460b:~/linux/krishan$ ls
beryl@beryl-HP-ProBook-6460b:~/linux/krishan$ 


Linux rm -r
With rm '-r' option, you can delete a directory having sub directories inside it. So you don't need to delete sub-directories manually.
Syntax:
    1. rm -r <dirname>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ rm -r krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 




rm -i
Remove a file interactively.
rm -rf
Remove a directory forcefully.


9. cp Command
The cp command is used to copy a file or directory.
Syntax:
To copy in the same directory:
       cp <existing file name> <new file name>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat krishan
hii i am krishan sorout try to use cat command
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cp krishan mohit
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat mohit
hii i am krishan sorout try to use cat command
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

To copy in a different directory:
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cp krishan ajay
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/ajay$ ls
krishan  mohit

beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/ajay$ ls
krishan  mohit



cp Options
Option
Function
cp -r 
To copy a directory along with its sub dirctories.
cp file1 file 2 directory name 
To copy multiple file or directories in a directory.
cp -backup 
To backup the existing file before over writing it.
cp -i 
Asks for confirmtion.
cp -l 
To create hard link file.
cp -p 
Preserves attribute of a file.
cp -u -v 
To make sure source file is newer then destination file.


10. Linux mv | Linux Move File
Linux mv command is used to move existing file or directory from one location to another. It is also used to rename a file or directory. If you want to rename a single directory or file then 'mv' option will be better to use.
Syntax :- mv oldname new name

output:-

beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
abc  jai  jaisingh
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ mv jaisingh krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
abc  jai  krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


mv Option
Option
Function
mv -i
Asks for permission to over write.
mv *
Move multiple files to a specific directory.
mv --suffix
Used to take backup before over writing.
mv -u
Only move those files that doesn't exist.



11. Linux Rename File and Directory
	syntax:-
rename 's/old-name/new-name/' files  

output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ ls
aaa  jai  jai~  krishan  new1.txt  new2.txt  new3.txt
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ rename 's/new/krishan/' *.txt
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ ls
aaa  jai  jai~  krishan  krishan1.txt  krishan2.txt  krishan3.txt


Linux File Content Commands
12. head Command
The head command is used to display the content of a file. It displays the first 10 lines of a file.
Syntax:
    1. head <file name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ head aaa
this is empty.beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ 


Head command for multiple files
If we'll write two file names then it will display first ten lines (in this case file has five lines only) of each file separated by a heading.
Syntax:
    1. head <file name> <file name>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ head krishan jai
==> krishan <==
i am his younger brother krishan.
==> jai <==
i am his younger brother krishan.
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ 


Linux head -n
The 'head -n' option displays specified number of lines.
Syntax:
    1. head -n <file name>  
Example:
    1. head -15 jtp.txt  

Linux head -c
The 'head -c' command counts the number of bytes of a file.
Syntax:
    1. head -c <number> <file name>  
Example:
    1. head -c 20 jtp.txt  

beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ head -c 20 krishan
i am his younger bro
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ 


13. tail Command
The tail command is similar to the head command. The difference between both commands is that it displays the last ten lines of the file content. It is useful for reading the error message.
Syntax:
    1. tail <file name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ tail krishan
i am his younger brother krishan.
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ 

14. tac Command
The tac command is the reverse of cat command, as its name specified. It displays the file content in reverse order (from the last line).
Syntax:
    1. tac <file name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ cat > mohit
1
2
3
4
5
6
7
8
9
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ tac mohit
9
8
7
6
5
4
3
2
1
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ 


15. more command
As 'cat' command displays the file content. Same way 'more' command also displays the content of a file. Only difference is that, in case of larger files, 'cat' command output will scroll off your screen while 'more' command displays output one screenful at a time.
Following keys are used in 'more' command to scroll the page:
    • Enter key: To scroll down page line by line. 
    • Space bar: To go to next page. 
    • b key: To go to the backward page. 
    • / key: Lets you search the string. 
Syntax:
    1. more <file name>  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux/abc$ more mohit
1
2
3
4
5
6
7
8
9


Linux more options
Options
Function
more -num
Limits the line displayed per page.
more -d
Displays user message at right corner.
more -s
Squeeze blank lines.
more +/string name
It helps to find the string.
more +num
Used to display the content from a specific line.



16. less command

The less command is similar to the more command. It also includes some extra features such as 'adjustment in width and height of the terminal.' Comparatively, the more command cuts the output in the width of the terminal.
Syntax:
    1. less <file name>  



17. cat filter

 
When cat command is used inside pipes, it does nothing except moving stdin to stout.
Syntax:
    1. cat <fileName> | cat or tac |  cat or tac |. . .  
Example:
    1. cat weeks.txt | tac | cat | cat | tac  
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat file1 | tac | cat

7
6
5
4
3
2
1


  18 .grep with pipe

The 'grep' command is generally used with pipe (|).
The 'grep' command stands for "global regular expression print". grep command filters the content of a file which makes our search easy.
syntax:-
cat file1 | grep 5
output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat file1 | grep 5
5
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

19. comm Command
The 'comm' command is used to compare two files or streams. By default, it displays three columns, first displays non-matching items of the first file, second indicates the non-matching item of the second file, and the third column displays the matching items of both files.
Syntax:
    1. comm <file1> <file2>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ comm f1.txt f2.txt
1
2
		3
		4
comm: file 2 is not in sorted order
	2
		5
5
6
7
8
	9
	61
	123
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


20. tr Command
The tr command is used to translate the file content like from lower case to upper case.
Syntax:
    1. command | tr <'old'> <'new'>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat >f3.txt
Hii i am krishan sorout.beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat f3.txt | tr 'iamksuo' 'IAMKSUO'
HII I AM KrIShAn SorOUt.
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$

21.uniq command
The uniq command is used to form a sorted list in which every word will occur only once.
Syntax:
    1. command <fileName> | uniq  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat f2.txt
3
4
2
5
9
61
123
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ sort f2.txt |uniq
123
2
3
4
5
61
9
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

22.  wc Command
The wc command is used to count the lines, words, and characters in a file.
Syntax:
    1. wc <file name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ wc f2.txt
 7  7 17 f2.txt
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

23. od Command
The od command is used to display the content of a file in different s, such as hexadecimal, octal, and ASCII characters.
Syntax:
    1. od -b <fileName>      // Octal format  
    2. od -t x1 <fileName>   // Hexa decimal format  
    3. od -c <fileName>     // ASCII character format  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ od -b f2.txt
0000000 063 012 064 012 062 012 065 012 071 012 066 061 012 061 062 063
0000020 012
0000021

24. sort Command
The sort command is used to sort files in alphabetical order.
Syntax:
    1. sort <file name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cat > krishan
jai=50
mohit=100
ajay=10
krishan=20
anshul=34
akshay=56
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ sort krishan
ajay=10
akshay=56
anshul=34
jai=50
krishan=20
mohit=100
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

25 gzip Command
The gzip command is used to truncate the file size. It is a compressing tool. It replaces the original file by the compressed file having '.gz' extension.
Syntax:
    1. gzip <file1> <file2> <file3>...  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ gzip krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
f1.txt  f2.txt  f3.txt  krishan.gz

26.  gunzip Command
The gunzip command is used to decompress a file. It is a reverse operation of gzip command.
Syntax:
    1. gunzip <file1> <file2> <file3>. .  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ gzip f3.txt
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
f1.txt  f2.txt  f3.txt.gz  krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ gunzip f3.txt
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
f1.txt  f2.txt  f3.txt  krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

Linux Utility Commands
27. find command
The find command is used to find a particular file within a directory. It also supports various options to find a file such as byname, by type, by date, and more.
The following symbols are used after the find command:
(.) : For current directory name
(/) : For root
Syntax:
    1. find . -name "*.pdf"  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ find . -name "*.txt"
./f2.txt
./f3.txt
./f1.txt

28.  locate Command
The locate command is used to search a file by file name. It is quite similar to find command; the difference is that it is a background process. It searches the file in the database, whereas the find command searches in the file system. It is faster than the find command. To find the file with the locates command, keep your database updated.
Syntax:
    1. locate <file name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ locate krishan
/home/beryl/.local/share/Trash/files/linux/krishan
/home/beryl/.local/share/Trash/files/linux/ajay/krishan
/home/beryl/Desktop/linux/krishan
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


29. date Command
The date command is used to display date, time, time zone, and more.
Syntax:
    1. date  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ date
Tuesday 21 December 2021 05:54:50 PM IST

30. cal Command
The cal command is used to display the current month's calendar with the current date highlighted.
Syntax:
    1. cal<  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ cal
   December 2021      
Su Mo Tu We Th Fr Sa  
          1  2  3  4  
 5  6  7  8  9 10 11  
12 13 14 15 16 17 18  
19 20 21 22 23 24 25  
26 27 28 29 30 31     
                      
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

31. sleep Command
The sleep command is used to hold the terminal by the specified amount of time. By default, it takes time in seconds.
Syntax:
    1. sleep <time>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ sleep 3
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


32. time Command
The time command is used to display the time to execute a command.
Syntax:
    1. time  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ time

real	0m0.000s
user	0m0.000s
sys	0m0.000s
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 


33. zcat Command
The zcat command is used to display the compressed files.
Syntax:
    1. zcat <file name>  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ ls
f1.txt  f2.txt  f3.txt  krishan.gz
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ zcat krishan
jai=50
mohit=100
ajay=10
krishan=20
anshul=34
akshay=56
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

34.df Command
The df command is used to display the disk space used in the file system. It displays the output as in the number of used blocks, available blocks, and the mounted directory.
Syntax:
    1. df  

output:-
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ df
Filesystem     1K-blocks     Used Available Use% Mounted on
udev             1951604        0   1951604   0% /dev
tmpfs             396156     1804    394352   1% /run
/dev/sda5      306098136 11221512 279258016   4% /
tmpfs            1980772     8868   1971904   1% /dev/shm
tmpfs               5120        4      5116   1% /run/lock
tmpfs            1980772        0   1980772   0% /sys/fs/cgroup
/dev/loop1           128      128         0 100% /snap/bare/5
/dev/loop0         56832    56832         0 100% /snap/core18/1988
/dev/loop2         56832    56832         0 100% /snap/core18/2253
/dev/loop3         63488    63488         0 100% /snap/core20/1270
/dev/loop4        224256   224256         0 100% /snap/gnome-3-34-1804/66
/dev/loop5        224256   224256         0 100% /snap/gnome-3-34-1804/77
/dev/loop6        253952   253952         0 100% /snap/gnome-3-38-2004/87
/dev/loop7         66432    66432         0 100% /snap/gtk-common-themes/1514
/dev/loop8         66816    66816         0 100% /snap/gtk-common-themes/1519
/dev/loop9         52352    52352         0 100% /snap/snap-store/518
/dev/loop11        31872    31872         0 100% /snap/snapd/11036
/dev/loop10        55552    55552         0 100% /snap/snap-store/558
/dev/loop12        44416    44416         0 100% /snap/snapd/14295
/dev/sda1         523248        4    523244   1% /boot/efi
tmpfs             396152       60    396092   1% /run/user/1000
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ 

35. exit Command
Linux exit command is used to exit from the current shell. It takes a parameter as a number and exits the shell with a return of status number.
Syntax:
    1. exit  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ exit


36.clear Command
Linux clear command is used to clear the terminal screen.
Syntax:
    1. clear  
Output:
beryl@beryl-HP-ProBook-6460b:~/Desktop/linux$ clear




NANO EDITOR:-----------

The editor's keystrokes and their functions         

File handling

Ctrl+S   	Save current file
Ctrl+O	Offer to write file ("Save as")
Ctrl+R	Insert a file into current one
Ctrl+X	Close buffer, exit from nano

Editing

Ctrl+K   	Cut current line into cutbuffer
Alt+6	Copy current line into cutbuffer
Ctrl+U	Paste contents of cutbuffer
Alt+T	Cut until end of buffer
Ctrl+]	Complete current word
Alt+3	Comment/uncomment line/region
Alt+U	Undo last action
Alt+E	Redo last undone action

Search and replace

Ctrl+Q   	Start backward search
Ctrl+W	Start forward search
Alt+Q	Find next occurrence backward
Alt+W	Find next occurrence forward
Alt+R	Start a replacing session

Deletion

Ctrl+H	Delete character before cursor      
Ctrl+D	Delete character under cursor
Alt+Bsp	Delete word to the left
Ctrl+Del   	Delete word to the right
Alt+Del	Delete current line

Operations

Ctrl+T   	Execute some command
Ctrl+J	Justify paragraph or region
Alt+J	Justify entire buffer
Alt+B	Run a syntax check
Alt+F	Run a formatter/fixer/arranger
Alt+:	Start/stop recording of macro
Alt+;	Replay macro

Moving around

Ctrl+B   	One character backward
Ctrl+F	One character forward
Ctrl+←	One word backward
Ctrl+→	One word forward
Ctrl+A	To start of line
Ctrl+E	To end of line
Ctrl+P	One line up
Ctrl+N	One line down
Ctrl+↑	To previous block
Ctrl+↓	To next block
Ctrl+Y	One page up
Ctrl+V	One page down
Alt+\	To top of buffer
Alt+/	To end of buffer

Special movement

Alt+G    	Go to specified line
Alt+]	Go to complementary bracket
Alt+↑	Scroll viewport up
Alt+↓	Scroll viewport down
Alt+<	Switch to preceding buffer
Alt+>	Switch to succeeding buffer

Information

Ctrl+C   	Report cursor position
Alt+D	Report line/word/character count
Ctrl+G	Display help text

Various

Alt+A	Turn the mark on/off
Tab	Indent marked region
Shift+Tab   	Unindent marked region
Alt+V	Enter next keystroke verbatim
Alt+N	Turn line numbers on/off
Alt+P	Turn visible whitespace on/off
Alt+X	Hide or unhide the help lines
Ctrl+L	Refresh the screen


