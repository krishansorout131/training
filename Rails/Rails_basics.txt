                                                  -------------> Ruby on Rails <----------------
                                                  
  
**  What is Rails?

    An extremely productive web-application framework.

    Written in Ruby by David Heinemeier Hansson.

    You could develop a web application at least ten times faster with Rails than you could with a typical Java framework.

    An open source Ruby framework for developing database-backed web applications.

    Configure your code with Database Schema.

    No compilation phase required.

*** install rails:--
gem install rails

*** checking version 
rails -v

*** creating first project :--

rails new demo -d postgresql

*** conect to database postgresql :-- Make some changes under config/database.yml file

-> Add our user name like postgres 
-> Add our password for postgres
   
* create database :-- 
 for creating database for the project we need to run :-
 rails db:create    command on terminal in root directory of project : beryl@beryl-HP-ProBook-6460b:~/Desktop/demo$
 
 ** drop database :--
 rails db:drop
 
beryl@beryl-HP-ProBook-6460b:~/Desktop/myapp$ rake db:drop
Dropped database 'myapp_development'
Database 'myapp_test' does not exist
 
                                                    
*** starting serever :--
rails server

after this to see your app type localhost address and see your app :-

http://localhost:3000                                                    


--------------------------------

** Ruby on Rails MVC Framework

The Model View Controller principle divides the work of an application into three separate but closely cooperative subsystems.

* Model (ActiveRecord )

It maintains the relationship between the objects and the database and handles validation, association, transactions, and more.

This subsystem is implemented in ActiveRecord library, which provides an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.


* View ( ActionView )

It is a presentation of data in a particular format, triggered by a controller's decision to present the data. They are script-based template systems like JSP, ASP, PHP, and very easy to integrate with AJAX technology.

This subsystem is implemented in ActionView library, which is an Embedded Ruby (ERb) based system for defining presentation templates for data presentation. Every Web connection to a Rails application results in the displaying of a view.


* Controller ( ActionController )

The facility within the application that directs traffic, on the one hand, querying the models for specific data, and on the other hand, organizing that data (searching, sorting, messaging it) into a form that fits the needs of a given view.

This subsystem is implemented in ActionController, which is a data broker sitting between ActiveRecord (the database interface) and ActionView (the presentation engine).


                                                 -------------------------------------------------

* Workflow for Creating Rails Applications

    Use the rails command to create the basic skeleton of the application.

    Create a database on the PostgreSQL server to hold your data.

    Configure the application to know where your database is located and the login credentials for it.

    Create Rails Active Records (Models), because they are the business objects you'll be working with in your controllers.

    Generate Migrations that simplify the creating and maintaining of database tables and columns.

    Write Controller Code to put a life in your application.

    Create Views to present your data through User Interface.


**** Rails Active Record is the Object/Relational Mapping (ORM) layer supplied with Rails. It closely follows the standard ORM model, which is as follows âˆ’

    tables map to classes,
    rows map to objects and
    columns map to object attributes.

Rails Active Records provide an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.


** create project : hospital_management:--
rails new hospital_management

** Adding first table :--

rails generate model Employee


**** rails db:migrate
== 20220122105744 CreateEmployees: migrating ==================================
-- create_table(:employees)
   -> 0.3356s
== 20220122105744 CreateEmployees: migrated (0.3357s) =========================


** Add new column to employees table:-

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails generate migration ToAddColumnToEmployee
      invoke  active_record
      create    db/migrate/20220122112043_to_add_column_to_employee.rb
      
* program :--
 
class ToAddColumnToEmployee < ActiveRecord::Migration[7.0]
  def change
    add_column :employees, :salary, :integer

  end
end
     
output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122112043 ToAddColumnToEmployee: migrating ============================
-- add_column(:employees, :salary, :integer)
   -> 0.0043s
== 20220122112043 ToAddColumnToEmployee: migrated (0.0044s) ===================

** Remove a column from table:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails g migration RemoveColumnFromPatient
      invoke  active_record
      create    db/migrate/20220122114502_remove_column_from_patient.rb
      
program:--

class RemoveColumnFromPatient < ActiveRecord::Migration[7.0]
  def change
    remove_column :patients, :address, :text
  end
end

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122114502 RemoveColumnFromPatient: migrating ==========================
-- remove_column(:patients, :address, :text)
   -> 0.0333s
== 20220122114502 RemoveColumnFromPatient: migrated (0.0334s) =================

*** Adding index,change column type, set column not null:-

class ToChangeInEmployee < ActiveRecord::Migration[7.0]
  def change
    add_index :employees, :name
    change_column :employees, :specialization, :string
    change_column_null :employees, :gender, false
    
  end
end

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122115429 ToChangeInEmployee: migrating ===============================
-- add_index(:employees, :name)
   -> 0.0700s
-- change_column(:employees, :specialization, :string)
   -> 0.0217s
-- change_column_null(:employees, :gender, false)
   -> 0.0028s
== 20220122115429 ToChangeInEmployee: migrated (0.0950s) ======================

*** Adding foreign key :-

class AddForeignKey < ActiveRecord::Migration[7.0]
  def change
    add_foreign_key :departments, :employees, column: :id, primary_key: :id
    add_column :employees, :d_id, :string


  end
end

output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122121654 AddForeignKey: migrating ====================================
-- add_foreign_key(:departments, :employees, {:column=>:id, :primary_key=>:id})
   -> 0.0592s
-- add_column(:employees, :d_id, :string)
   -> 0.0087s
== 20220122121654 AddForeignKey: migrated (0.0681s) ===========================

** removing foreign key:-

class RemoveForeignKey < ActiveRecord::Migration[7.0]
  def change
    remove_foreign_key :departments, column: :id
  
  end
end

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122122925 RemoveForeignKey: migrating =================================
-- remove_foreign_key(:departments, {:column=>:id})
   -> 0.0101s
== 20220122122925 RemoveForeignKey: migrated (0.0103s) ========================


*** Adding refrence :--
class AddingRefrence < ActiveRecord::Migration[7.0]
  def change
    add_reference(:departments, :employees,foreign_key: true)
  end
end

output:--
== 20220124051125 AddingRefrence: migrating ===================================
-- add_reference(:departments, :employees, {:foreign_key=>true})
   -> 0.3366s
== 20220124051125 AddingRefrence: migrated (0.3368s) ==========================

*** create table :- rails g migration CreateNewtable

class CreateNewtable < ActiveRecord::Migration[7.0]
  def change
    create_table :lab do |t|
     
      t.string :name
      t.integer :lab_code
    end
  end
end

output:--

== 20220124052741 CreateNewtable: migrating ===================================
-- create_table(:lab)
   -> 0.5052s
== 20220124052741 CreateNewtable: migrated (0.5054s) ==========================
      

** drop table :--

class RemoveTable < ActiveRecord::Migration[7.0]
  def change
    drop_table :lab
  end
end

output:--
== 20220124053534 RemoveTable: migrating ======================================
-- drop_table(:lab)
   -> 0.0393s
== 20220124053534 RemoveTable: migrated (0.0394s) =============================

** Remove index :-

class RemoveIndeFromEmployees < ActiveRecord::Migration[7.0]
  def change
    remove_index :employees, :name
  end
end

output:--
== 20220124054045 RemoveIndeFromEmployees: migrating ==========================
-- remove_index(:employees, :name)
   -> 0.0081s
== 20220124054045 RemoveIndeFromEmployees: migrated (0.0082s) =================

** Remove Refrence :--

class RemoveRefrence < ActiveRecord::Migration[7.0]
  def change
    remove_reference :departments, :employees, foreign_key: true
  end
end

output:--
== 20220124054434 RemoveRefrence: migrating ===================================
-- remove_reference(:departments, :employees, {:foreign_key=>true})
   -> 0.0133s
== 20220124054434 RemoveRefrence: migrated (0.0135s) ==========================

*** remove Timestamps :--
class RemoveTimestamps < ActiveRecord::Migration[7.0]
  def change
    remove_timestamps :departments
  end
end

output:--
== 20220124055015 RemoveTimestamps: migrating =================================
-- remove_timestamps(:departments)
   -> 0.0065s
== 20220124055015 RemoveTimestamps: migrated (0.0067s) ========================

** Adding Timestamps :--

class AddingTimestamps < ActiveRecord::Migration[7.0]
  def change
    add_timestamps :departments, null: false
  end
end

output:--
== 20220124055321 AddingTimestamps: migrating =================================
-- add_timestamps(:departments, {:null=>false})
   -> 0.0063s
== 20220124055321 AddingTimestamps: migrated (0.0064s) ========================

** rename column :-
class RenamingColumn < ActiveRecord::Migration[7.0]
  def change
    rename_column :patients, :gender, :address
    add_index :employees, :name
  end
end

output:--
== 20220124055751 RenamingColumn: migrating ===================================
-- rename_column(:patients, :gender, :address)
   -> 0.0071s
-- add_index(:employees, :name)
   -> 0.1535s
== 20220124055751 RenamingColumn: migrated (0.1608s) ==========================



*** rename index :--
class RenameIndex < ActiveRecord::Migration[7.0]
  def change
    rename_index :employees, "index_employees_on_name", "n"
  end
end

output:
== 20220124060412 RenameIndex: migrating ======================================
-- rename_index(:employees, "index_employees_on_name", "n")
   -> 0.0062s
== 20220124060412 RenameIndex: migrated (0.0065s) =============================

*** rename table :-
class RenameTable < ActiveRecord::Migration[7.0]
  def change
    rename_table 'patients', 'all_patients'
  end
end

output:--

== 20220124061349 RenameTable: migrating ======================================
-- rename_table("patients", "all_patients")
   -> 0.0149s
== 20220124061349 RenameTable: migrated (0.0151s) =============================


*** CRUD: Reading and Writing Data:--

* write operation :--
3.0.0 :005 > employee = Employee.new(name: "ajay", dob: "15-07-2000", gender: "male", specialization: "medicine specialist"
, salary: 10000).save

 #<Employee:0x0000561abe5abf98
  id: 5,
  name: "ajay",
  gender: "male",
  dob: Sat, 15 Jul 2000,
  specialization: "medicine specialist",
  salary: 10000,
  department_id: nil,
  created_at: Mon, 24 Jan 2022 10:52:20.757229000 UTC +00:00,
  updated_at: Mon, 24 Jan 2022 10:52:20.757229000 UTC +00:00>] 
  
  ** 3.0.0 :026 > department = Department.create(name: "medical department")
  
  3.0.0 :024 > departments = Department.all
  
  Department Load (0.6ms)  SELECT "departments".* FROM "departments"
 =>                                                                             
[#<Department:0x0000561abf1f75e0                                                
...                                                                             
3.0.0 :025 > departments
 => 
[#<Department:0x0000561abf1f75e0                                                
  id: 1,                                                                        
  name: "medical department",                                                   
  created_at: Mon, 24 Jan 2022 11:05:13.547846000 UTC +00:00,                   
  updated_at: Mon, 24 Jan 2022 11:05:13.547846000 UTC +00:00>]  
  
  *** Read :--
  
  3.0.0 :038 > patients = Patient.all
  Patient Load (0.5ms)  SELECT "patients".* FROM "patients"
 =>                                                                       
[#<Patient:0x0000561abf0903c8                                             
...                                                                       
3.0.0 :039 > patients
 => 
[#<Patient:0x0000561abf0903c8                                             
  id: 1,                                                                  
  name: "Ram kumar",                                                      
  gender: "male",                                                         
  dob: Wed, 23 Sep 1998,                                                  
  address: "hodal",                                                       
  created_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00,             
  updated_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00>,            
 #<Patient:0x0000561abf0902b0                                             
  id: 2,                                     
  name: "Shyam kumar",                       
  gender: "male",                            
  dob: Wed, 20 Aug 1997,                     
  address: "bahin",                          
  created_at: Mon, 24 Jan 2022 11:35:11.989627000 UTC +00:00,
  updated_at: Mon, 24 Jan 2022 11:35:11.989627000 UTC +00:00>,
 #<Patient:0x0000561abf0901e8
  id: 3,
  name: "Seema devi",
  gender: "female",
  dob: Wed, 21 Apr 1993,
  address: "ramgadh",
  created_at: Mon, 24 Jan 2022 11:36:09.731998000 UTC +00:00,
  updated_at: Mon, 24 Jan 2022 11:36:09.731998000 UTC +00:00>] 
3.0.0 :040 > 

-----------------------------------------

*** 3.0.0 :040 > patient = Patient.first

  Patient Load (0.8ms)  SELECT "patients".* FROM "patients" ORDER BY "patients"."id" ASC LIMIT $1  [["LIMIT", 1]]
 =>                                                                      
#<Patient:0x0000561abf0ef260                                             
...                                                                      
3.0.0 :041 > patient
 => 
#<Patient:0x0000561abf0ef260                                             
 id: 1,                                                                  
 name: "Ram kumar",                                                      
 gender: "male",                                                         
 dob: Wed, 23 Sep 1998,                                                  
 address: "hodal",                                                       
 created_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00,             
 updated_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00>             
3.0.0 :042 > 

-----------------------------------------

3.0.0 :042 > patient = Patient.find_by(name: "Seema devi")

  Patient Load (0.8ms)  SELECT "patients".* FROM "patients" WHERE "patients"."name" = $1 LIMIT $2  [["name", "Seema devi"], ["LIMIT", 1]]                                                             
 =>                                                                        
#<Patient:0x0000561abd68f7f8                                               
...                                                                        
3.0.0 :043 > patient
 => 
#<Patient:0x0000561abd68f7f8                                               
 id: 3,                                                                    
 name: "Seema devi",                                                       
 gender: "female",                                                         
 dob: Wed, 21 Apr 1993,                                                    
 address: "ramgadh",                                        
 created_at: Mon, 24 Jan 2022 11:36:09.731998000 UTC +00:00,
 updated_at: Mon, 24 Jan 2022 11:36:09.731998000 UTC +00:00> 
 
 -------------------------------------------------
 
 3.0.0 :044 > patients = Patient.where(name: "Ram kumar", address: "hodal").order(created_at: :desc)
 
  Patient Load (39.9ms)  SELECT "patients".* FROM "patients" WHERE "patients"."name" = $1 AND "patients"."address" = $2 ORDER BY "patients"."created_at" DESC  [["name", "Ram kumar"], ["address", "hodal"]]                                          
 =>                                                                                                                        
[#<Patient:0x0000561abf902ab0                                                                                              
...                                                                                                                        
3.0.0 :045 > patients
 => 
[#<Patient:0x0000561abf902ab0                                                                                              
  id: 1,                                                                                                                   
  name: "Ram kumar",                                                                                                       
  gender: "male",                                                                                                          
  dob: Wed, 23 Sep 1998,                                                                                                   
  address: "hodal",                                                                                                        
  created_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00,                                                              
  updated_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00>]                                                             
3.0.0 :046 > 

--------------------------------------------------

*** Update:--

Once an Active Record object has been retrieved, its attributes can be modified and it can be saved to the database.

patient = Patient.first

3.0.0 :039 > patient
 => 
 id: 1,                                                                  
 name: "Ram kumar",                                                      
 gender: "male",                                                         
 dob: Wed, 23 Sep 1998,                                                  
 address: "hodal",                                                       
 created_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00,             
 updated_at: Mon, 24 Jan 2022 11:33:00.797267000 UTC +00:00>             

3.0.0 :048 > patient.name = "Ravi kumar"
 => "Ravi kumar" 

3.0.0 :049 > patient.save
  TRANSACTION (0.3ms)  BEGIN
  Patient Update (0.8ms)  UPDATE "patients" SET "name" = $1, "updated_at" = $2 WHERE "patients"."id" = $3  [["name", "Ravi kumar"], ["updated_at", "2022-01-24 11:53:39.774876"], ["id", 1]]
  TRANSACTION (34.1ms)  COMMIT                                 
 => true                


****
3.0.0 :053 > patient.update(name: "Ram kumar")
  TRANSACTION (0.3ms)  BEGIN
  Patient Update (0.7ms)  UPDATE "patients" SET "name" = $1, "updated_at" = $2 WHERE "patients"."id" = $3  [["name", "Ram kumar"], ["updated_at", "2022-01-24 11:57:04.174980"], ["id", 1]]
  TRANSACTION (38.4ms)  COMMIT                                 
 => true                             
 
 ****
 .0.0 :060 > patients.update(:all, address: "hodal")
  TRANSACTION (0.4ms)  BEGIN
  Patient Update (31.5ms)  UPDATE "patients" SET "address" = $1, "updated_at" = $2 WHERE "patients"."id" = $3  [["address", "hodal"], ["updated_at", "2022-01-24 12:02:26.789530"], ["id", 2]]                    
  TRANSACTION (16.1ms)  COMMIT                                                         
  TRANSACTION (0.3ms)  BEGIN                                                           
  Patient Update (0.7ms)  UPDATE "patients" SET "address" = $1, "updated_at" = $2 WHERE "patients"."id" = $3  [["address", "hodal"], ["updated_at", "2022-01-24 12:02:26.840387"], ["id", 3]]                     
  TRANSACTION (4.4ms)  COMMIT    
  
  -----------------------------------------------
  
  **** Delete:--
  
  employee = Employee.find_by(salary: 5000)
  
  id: 1,                                                                    
 name: "krishan",                                                          
 gender: "male",                                                           
 dob: Wed, 26 Jul 2000,                                                    
 specialization: nil,                                                      
 salary: 5000,                                                             
 department_id: nil,                                                       
 created_at: Mon, 24 Jan 2022 10:26:17.466001000 UTC +00:00,
 updated_at: Mon, 24 Jan 2022 10:26:17.466001000 UTC +00:00> 


3.0.0 :072 > employee.destroy

  TRANSACTION (0.3ms)  BEGIN
  Employee Destroy (0.6ms)  DELETE FROM "employees" WHERE "employees"."id" = $1  [["id", 1]]
  TRANSACTION (54.6ms)  COMMIT  
  
  
  
  3.0.0 :077 > Employee.destroy_by(id: 3)
  
  Employee Load (0.5ms)  SELECT "employees".* FROM "employees" WHERE "employees"."id" = $1  [["id", 3]]
  TRANSACTION (0.4ms)  BEGIN                                    
  Employee Destroy (0.5ms)  DELETE FROM "employees" WHERE "employees"."id" = $1  [["id", 3]]
  TRANSACTION (36.8ms)  COMMIT                                  
 =>
                                                              
[#<Employee:0x0000561abf9da6e0                                  
  id: 3,                                                        
  name: "mohit",                                                
  gender: "male",                                               
  dob: Tue, 01 Feb 2000,                                        
  specialization: nil,                                          
  salary: nil,                                                  
  department_id: nil,                                           
  created_at: Mon, 24 Jan 2022 10:30:30.671896000 UTC +00:00,   
  updated_at: Mon, 24 Jan 2022 10:30:30.671896000 UTC +00:00>]  
  

--------------------------------------------------------------------


**** Retrieving Objects from the Database:--

* 3.0.0 :005 > employee = Employee.find(11)

output:-
3.0.0 :007 > employee
 => 
#<Employee:0x000055fcefa731a8
 id: 11,                    
 name: "Kapil",             
 gender: "male",            
 dob: Thu, 25 Jun 1998,     
 specialization: "radiologist",
 salary: 52000,             
 department_id: 4,          
 created_at: Mon, 24 Jan 2022 12:46:25.719846000 UTC +00:00,
 updated_at: Mon, 24 Jan 2022 12:46:25.719846000 UTC +00:00> 


* employees = Employee.find([11,16])
it will show employees where id = 11 and 16

**3.0.0 :017 > employee = Employee.take   it show first record 

3.0.0 :021 > employee = Employee.take(5)  it shows first 5 results

3.0.0 :023 > employee = Employee.first(3) it shows first 3 results only in asscending order 


* last : -
3.0.0 :032 > employee = Employee.last     returns the last value 
  
3.0.0 :032 > employee = Employee.last(3)  returns the last 3 values


**find_by

3.0.0 :037 > employee = Employee.find_by(name: "Jai singh")

3.0.0 :038 > employee
 => 
#<Employee:0x000055fcef929fb8                                                      
 id: 12,                                                                           
 name: "Jai singh",                                                                
 gender: "male",                                                                   
 dob: Wed, 08 Jul 1998,                                                            
 specialization: "orthopedic surgeon",                                             
 salary: 100000,                                                                   
 department_id: 7,
 created_at: Mon, 24 Jan 2022 12:54:01.794218000 UTC +00:00,
 updated_at: Mon, 24 Jan 2022 12:54:01.794218000 UTC +00:00> 

** where :-
3.0.0 :041 > employee = Employee.where(name: "Jai singh")


**** Conditions :--
range condition:-

3.0.0 :048 > Employee.where(id: 14 .. 16)

it print three values where id is 14, 15, 16


* subset condition :-- in condition

3.0.0 :048 > Employee.where(id: [1,2,3,6,7,8])


it will print all values which are matched with table 


* not in condition:--
 
3.0.0 :050 > Employee.where.not(id: [1,2,5,6,8])

it only shows the values which is not matched with values in array


** or condition :-

3.0.0 :053 > Employee.where(name: "Jai singh").or(Employee.where(id: [1,2,3]))

[#<Employee:0x000055fcefbb0b60                    it only print jai singh because id 1,2,3 is not present in database.
  id: 12,
  name: "Jai singh",
  gender: "male",
  dob: Wed, 08 Jul 1998,
  specialization: "orthopedic surgeon",
  salary: 100000,
  department_id: 7,
  created_at: Mon, 24 Jan 2022 12:54:01.794218000 UTC +00:00,
  updated_at: Mon, 24 Jan 2022 12:54:01.794218000 UTC +00:00>] 


*** and :-

3.0.0 :054 > Employee.where(name: "Jai singh").where(id: [11,12,13])

[#<Employee:0x000055fcefa78c98                                                                   
  id: 12,                                                                                        
  name: "Jai singh",                                                                             
  gender: "male",                                                                                
  dob: Wed, 08 Jul 1998,                                                                         
  specialization: "orthopedic surgeon",                                                          
  salary: 100000,                                                                                
  department_id: 7,                                                                              
  created_at: Mon, 24 Jan 2022 12:54:01.794218000 UTC +00:00,                                    
  updated_at: Mon, 24 Jan 2022 12:54:01.794218000 UTC +00:00>]     
  
  
3.0.0 :055 > Employee.where(name: "Jai singh").and(Employee.where(id: [1,2,3]))
  Employee Load (1.0ms)  SELECT "employees".* FROM "employees" WHERE "employees"."name" = $1 AND "employees"."id" IN ($2, $3, $4)  [["name", "Jai singh"], ["id", 1], ["id", 2], ["id", 3]]       
 => []  
 

** ordering:--

3.0.0 :058 > Employee.order(created_at: :desc)

it print all values in descending order as per created time start with last creat value end with first create value


*** Selecting Specific Fields:--

3.0.0 :066 > employees = Employee.select(:name, :dob).limit(3)

  Employee Load (0.5ms)  SELECT "employees"."name", "employees"."dob" FROM "employees" LIMIT $1  [["LIMIT", 3]]                                                                        
 =>                                                                                   
[#<Employee:0x000055fcefa13af0 id: nil, name: "Harkesh Singh", dob: Thu, 05 Jul 1990>,
...                                                                                   
3.0.0 :067 > employees
 => 
[#<Employee:0x000055fcefa13af0 id: nil, name: "Harkesh Singh", dob: Thu, 05 Jul 1990>,
 #<Employee:0x000055fcefa13a28 id: nil, name: "ajay", dob: Sat, 15 Jul 2000>,         
 #<Employee:0x000055fcefa13960 id: nil, name: "Nikunj goyal", dob: Thu, 04 Jun 1992>] 
3.0.0 :068 >    
  
  
3.0.0 :070 > employees = Employee.select(:department_id).distinct

*** Limit and Offset :-

3.0.0 :074 > Employee.limit(1)        only show one value 

  Employee Load (0.8ms)  SELECT "employees".* FROM "employees" LIMIT $1  [["LIMIT", 1]]
 => 
[#<Employee:0x000055fcf05e3628
  id: 6,
  name: "Harkesh Singh",
  gender: "male",
  dob: Thu, 05 Jul 1990,
  specialization: "physician",
  salary: 50000,
  department_id: 1,
  created_at: Mon, 24 Jan 2022 11:16:41.439184000 UTC +00:00,
  updated_at: Mon, 24 Jan 2022 11:16:41.439184000 UTC +00:00>] 
  
  
  3.0.0 :074 > Employee.limit(5)        only show first five value 
  

3.0.0 :080 > Employee.limit(5).offset(2)
  
  it leaves first 2 values and start with 3rd value end with 8th value
  
  
  
*** Group :-

3.0.0 :082 > Employee.select(:department_id).group("department_id")
  Employee Load (1.1ms)  SELECT "employees"."department_id" FROM "employees" GROUP BY "employees"."department_id"
 => 
[#<Employee:0x000055fcf0648af0 id: nil, department_id: 3>,
 #<Employee:0x000055fcf0648a28 id: nil, department_id: 5>,
 #<Employee:0x000055fcf0648960 id: nil, department_id: 4>,
 #<Employee:0x000055fcf0648870 id: nil, department_id: 6>,
 #<Employee:0x000055fcf0648758 id: nil, department_id: 2>,
 #<Employee:0x000055fcf0648690 id: nil, department_id: 7>,
 #<Employee:0x000055fcf06485a0 id: nil, department_id: 1>] 


3.0.0 :083 > Employee.select(:department_id).group("department_id").count

total of grouped items:

  Employee Count (0.reverse_order9ms)  SELECT COUNT("employees"."department_id") AS "count_department_id", "employees"."department_id" AS "employees_department_id" FROM "employees" GROUP BY "employees"."department_id"
 
 => {3=>2, 5=>1, 4=>1, 6=>2, 2=>1, 7=>1, 1=>5} 
  
  
*** Overriding Conditions:-

 unscope :-

3.0.0 :100 > Employee.where('id < 10').limit(5).order('updated_at desc').unscope(:order)


** only :-

3.0.0 :106 > Employee.where('id > 10').limit(5).order('updated_at desc').only(:order, :where)

here only the functions / conditions written inside only () will work.


** reselect  :--

employee = Employee.select(:name, :salary).reselect(:created_at)

it only select values inside reselect function.

*** reverse_order :-

3.0.0 :115 > Employee.order(created_at: :desc).reverse_order

it shows opposite results of order function.

** rewhere:-

3.0.0 :118 > Employee.where(name: "Jai singh").rewhere(name: "Nikunj goyal")

  Employee Load (0.8ms)  SELECT "employees".* FROM "employees" WHERE "employees"."name" = $1  [["name", "Nikunj goyal"]]                                                                  
 =>                                                                                      
[#<Employee:0x000055fcf0419338                                                           
  id: 7,                                                                             
  name: "Nikunj goyal",                                                              
  gender: "male",                                                                    
  dob: Thu, 04 Jun 1992,                                                             
  specialization: "medicine specialist",                                             
  salary: 60000,                                                                     
  department_id: 1,                                                                  
  created_at: Mon, 24 Jan 2022 12:38:31.097100000 UTC +00:00,                        
  updated_at: Mon, 24 Jan 2022 12:38:31.097100000 UTC +00:00>]     



