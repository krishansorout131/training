                                                  -------------> Ruby on Rails <----------------
                                                  
  
**  What is Rails?

    An extremely productive web-application framework.

    Written in Ruby by David Heinemeier Hansson.

    You could develop a web application at least ten times faster with Rails than you could with a typical Java framework.

    An open source Ruby framework for developing database-backed web applications.

    Configure your code with Database Schema.

    No compilation phase required.

*** install rails:--
gem install rails

*** checking version 
rails -v

*** creating first project :--

rails new demo -d postgresql

*** conect to database postgresql :-- Make some changes under config/database.yml file

-> Add our user name like postgres 
-> Add our password for postgres
   
* create database :-- 
 for creating database for the project we need to run :-
 rails db:create    command on terminal in root directory of project : beryl@beryl-HP-ProBook-6460b:~/Desktop/demo$
 
 ** drop database :--
 rails db:drop
 
beryl@beryl-HP-ProBook-6460b:~/Desktop/myapp$ rake db:drop
Dropped database 'myapp_development'
Database 'myapp_test' does not exist
 
                                                    
*** starting serever :--
rails server

after this to see your app type localhost address and see your app :-

http://localhost:3000                                                    


--------------------------------

** Ruby on Rails MVC Framework

The Model View Controller principle divides the work of an application into three separate but closely cooperative subsystems.

* Model (ActiveRecord )

It maintains the relationship between the objects and the database and handles validation, association, transactions, and more.

This subsystem is implemented in ActiveRecord library, which provides an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.


* View ( ActionView )

It is a presentation of data in a particular format, triggered by a controller's decision to present the data. They are script-based template systems like JSP, ASP, PHP, and very easy to integrate with AJAX technology.

This subsystem is implemented in ActionView library, which is an Embedded Ruby (ERb) based system for defining presentation templates for data presentation. Every Web connection to a Rails application results in the displaying of a view.


* Controller ( ActionController )

The facility within the application that directs traffic, on the one hand, querying the models for specific data, and on the other hand, organizing that data (searching, sorting, messaging it) into a form that fits the needs of a given view.

This subsystem is implemented in ActionController, which is a data broker sitting between ActiveRecord (the database interface) and ActionView (the presentation engine).


                                                 -------------------------------------------------

* Workflow for Creating Rails Applications

    Use the rails command to create the basic skeleton of the application.

    Create a database on the PostgreSQL server to hold your data.

    Configure the application to know where your database is located and the login credentials for it.

    Create Rails Active Records (Models), because they are the business objects you'll be working with in your controllers.

    Generate Migrations that simplify the creating and maintaining of database tables and columns.

    Write Controller Code to put a life in your application.

    Create Views to present your data through User Interface.


**** Rails Active Record is the Object/Relational Mapping (ORM) layer supplied with Rails. It closely follows the standard ORM model, which is as follows âˆ’

    tables map to classes,
    rows map to objects and
    columns map to object attributes.

Rails Active Records provide an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.


** create project : hospital_management:--
rails new hospital_management

** Adding first table :--

rails generate model Employee


**** rails db:migrate
== 20220122105744 CreateEmployees: migrating ==================================
-- create_table(:employees)
   -> 0.3356s
== 20220122105744 CreateEmployees: migrated (0.3357s) =========================


** Add new column to employees table:-

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails generate migration ToAddColumnToEmployee
      invoke  active_record
      create    db/migrate/20220122112043_to_add_column_to_employee.rb
      
* program :--
 
class ToAddColumnToEmployee < ActiveRecord::Migration[7.0]
  def change
    add_column :employees, :salary, :integer

  end
end
     
output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122112043 ToAddColumnToEmployee: migrating ============================
-- add_column(:employees, :salary, :integer)
   -> 0.0043s
== 20220122112043 ToAddColumnToEmployee: migrated (0.0044s) ===================

** Remove a column from table:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails g migration RemoveColumnFromPatient
      invoke  active_record
      create    db/migrate/20220122114502_remove_column_from_patient.rb
      
program:--

class RemoveColumnFromPatient < ActiveRecord::Migration[7.0]
  def change
    remove_column :patients, :address, :text
  end
end

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122114502 RemoveColumnFromPatient: migrating ==========================
-- remove_column(:patients, :address, :text)
   -> 0.0333s
== 20220122114502 RemoveColumnFromPatient: migrated (0.0334s) =================

*** Adding index,change column type, set column not null:-

class ToChangeInEmployee < ActiveRecord::Migration[7.0]
  def change
    add_index :employees, :name
    change_column :employees, :specialization, :string
    change_column_null :employees, :gender, false
    
  end
end

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122115429 ToChangeInEmployee: migrating ===============================
-- add_index(:employees, :name)
   -> 0.0700s
-- change_column(:employees, :specialization, :string)
   -> 0.0217s
-- change_column_null(:employees, :gender, false)
   -> 0.0028s
== 20220122115429 ToChangeInEmployee: migrated (0.0950s) ======================

*** Adding foreign key :-

class AddForeignKey < ActiveRecord::Migration[7.0]
  def change
    add_foreign_key :departments, :employees, column: :id, primary_key: :id
    add_column :employees, :d_id, :string


  end
end

output:--
beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122121654 AddForeignKey: migrating ====================================
-- add_foreign_key(:departments, :employees, {:column=>:id, :primary_key=>:id})
   -> 0.0592s
-- add_column(:employees, :d_id, :string)
   -> 0.0087s
== 20220122121654 AddForeignKey: migrated (0.0681s) ===========================

** removing foreign key:-

class RemoveForeignKey < ActiveRecord::Migration[7.0]
  def change
    remove_foreign_key :departments, column: :id
  
  end
end

output:--

beryl@beryl-HP-ProBook-6460b:~/Desktop/hospital_management$ rails db:migrate
== 20220122122925 RemoveForeignKey: migrating =================================
-- remove_foreign_key(:departments, {:column=>:id})
   -> 0.0101s
== 20220122122925 RemoveForeignKey: migrated (0.0103s) ========================


*** Adding refrence :--
class AddingRefrence < ActiveRecord::Migration[7.0]
  def change
    add_reference(:departments, :employees,foreign_key: true)
  end
end

output:--
== 20220124051125 AddingRefrence: migrating ===================================
-- add_reference(:departments, :employees, {:foreign_key=>true})
   -> 0.3366s
== 20220124051125 AddingRefrence: migrated (0.3368s) ==========================

*** create table :- rails g migration CreateNewtable

class CreateNewtable < ActiveRecord::Migration[7.0]
  def change
    create_table :lab do |t|
     
      t.string :name
      t.integer :lab_code
    end
  end
end

output:--

== 20220124052741 CreateNewtable: migrating ===================================
-- create_table(:lab)
   -> 0.5052s
== 20220124052741 CreateNewtable: migrated (0.5054s) ==========================
      

** drop table :--

class RemoveTable < ActiveRecord::Migration[7.0]
  def change
    drop_table :lab
  end
end

output:--
== 20220124053534 RemoveTable: migrating ======================================
-- drop_table(:lab)
   -> 0.0393s
== 20220124053534 RemoveTable: migrated (0.0394s) =============================

** Remove index :-

class RemoveIndeFromEmployees < ActiveRecord::Migration[7.0]
  def change
    remove_index :employees, :name
  end
end

output:--
== 20220124054045 RemoveIndeFromEmployees: migrating ==========================
-- remove_index(:employees, :name)
   -> 0.0081s
== 20220124054045 RemoveIndeFromEmployees: migrated (0.0082s) =================

** Remove Refrence :--

class RemoveRefrence < ActiveRecord::Migration[7.0]
  def change
    remove_reference :departments, :employees, foreign_key: true
  end
end

output:--
== 20220124054434 RemoveRefrence: migrating ===================================
-- remove_reference(:departments, :employees, {:foreign_key=>true})
   -> 0.0133s
== 20220124054434 RemoveRefrence: migrated (0.0135s) ==========================

*** remove Timestamps :--
class RemoveTimestamps < ActiveRecord::Migration[7.0]
  def change
    remove_timestamps :departments
  end
end

output:--
== 20220124055015 RemoveTimestamps: migrating =================================
-- remove_timestamps(:departments)
   -> 0.0065s
== 20220124055015 RemoveTimestamps: migrated (0.0067s) ========================

** Adding Timestamps :--

class AddingTimestamps < ActiveRecord::Migration[7.0]
  def change
    add_timestamps :departments, null: false
  end
end

output:--
== 20220124055321 AddingTimestamps: migrating =================================
-- add_timestamps(:departments, {:null=>false})
   -> 0.0063s
== 20220124055321 AddingTimestamps: migrated (0.0064s) ========================

** rename column :-
class RenamingColumn < ActiveRecord::Migration[7.0]
  def change
    rename_column :patients, :gender, :address
    add_index :employees, :name
  end
end

output:--
== 20220124055751 RenamingColumn: migrating ===================================
-- rename_column(:patients, :gender, :address)
   -> 0.0071s
-- add_index(:employees, :name)
   -> 0.1535s
== 20220124055751 RenamingColumn: migrated (0.1608s) ==========================



*** rename index :--
class RenameIndex < ActiveRecord::Migration[7.0]
  def change
    rename_index :employees, "index_employees_on_name", "n"
  end
end

output:
== 20220124060412 RenameIndex: migrating ======================================
-- rename_index(:employees, "index_employees_on_name", "n")
   -> 0.0062s
== 20220124060412 RenameIndex: migrated (0.0065s) =============================

*** rename table :-
class RenameTable < ActiveRecord::Migration[7.0]
  def change
    rename_table 'patients', 'all_patients'
  end
end

output:--

== 20220124061349 RenameTable: migrating ======================================
-- rename_table("patients", "all_patients")
   -> 0.0149s
== 20220124061349 RenameTable: migrated (0.0151s) =============================


