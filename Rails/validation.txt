                              -----------------------------> Active Record Validations <-----------------------------
                           
                           
*** valid? and invalid?

Before saving an Active Record object, Rails runs your validations. If these validations produce any errors, Rails does not save the object.

You can also run these validations on your own. valid? triggers your validations and returns true if no errors were found in the object, and false otherwise.                             

example:-

class Employee < ApplicationRecord
    validates :salary, presence: true 
end

output:--
3.0.0 :006 > employee = Employee.create(name: "Krishan", gender: "male").valid?
 => false 
 
 3.0.0 :011 > employee.errors.objects.first.full_message
 => "Salary can't be blank" 
3.0.0 :012 > 

3.0.0 :012 > employee.errors.size
 => 1
 
 3.0.0 :020 > employee.errors.objects[0]
 => #<ActiveModel::Error attribute=salary, type=blank, options={}> 
 
 
 class Employee < ApplicationRecord
    validates :salary, presence: true 
    validates :specialization, presence: true
end

3.0.0 :014 > employee = Employee.create(name: "Krishan", gender: "male")

3.0.0 :014 > employee.errors
 => #<ActiveModel::Errors [#<ActiveModel::Error attribute=salary, type=blank, options={}>, #<ActiveModel::Error attribute=specialization, type=blank, options={}>]>                         
3.0.0 :015 > 

errors:--

                        ^                                                                     
3.0.0 :013 > employee.errors.objects[1].full_message
 => "Specialization can't be blank" 
3.0.0 :014 > 


*** comparision:--
This check will validate a comparison between any two comparable values. The validator requires a compare option be supplied. Each option accepts a value, proc, or symbol. Any class that includes Comparable can be compared.
less_than, greater_than, equal_to, greater_than_equal_to

3.0.0 :006 > employee = Employee.create(name: "Karan", gender: "male", specialization: "Ward boy", salary: 60000)

class Employee < ApplicationRecord
  validates :salary, comparison: {less_than_or_equal_to: 50000}
end


=> 
 id: 25,                                                                                                                   
 name: "Karan",                                                                                                            
 gender: "male",            
 dob: nil,                  
 specialization: "Ward boy",
 salary: 6000,              
 department_id: nil,        
 created_at: Wed, 26 Jan 2022 06:44:09.045075000 UTC +00:00,
 updated_at: Wed, 26 Jan 2022 06:44:09.045075000 UTC +00:00> 
 
 3.0.0 :006 > employee = Employee.create(name: "Karan", gender: "male", specialization: "Ward boy", salary: 70000)
 
 error:-
 
 3.0.0 :006 > employee.errors.objects.first.full_message
 => "Salary must be less than or equal to 50000" 
 
 
 ** exclusion

This helper validates that the attributes' values are not included in a given set. In fact, this set can be any enumerable object.

3.0.0 :004 > patient = Patient.create(name: "ravi", gender: "male", address: "delhi")

class Patient < ApplicationRecord
  validates :address, exclusion: { in: %w(delhi gurugram), message: "%{value} is reserved." }
end


error:--

3.0.0 :005 > patient.errors.objects.first.full_message
 => "Address gurugram is reserved." 
 
 
